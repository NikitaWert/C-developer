// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_renderer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_5frenderer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_5frenderer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5frenderer_2eproto;
namespace map_render_sittings {
class ColorRGB;
class ColorRGBDefaultTypeInternal;
extern ColorRGBDefaultTypeInternal _ColorRGB_default_instance_;
class ColorString;
class ColorStringDefaultTypeInternal;
extern ColorStringDefaultTypeInternal _ColorString_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Render_settings;
class Render_settingsDefaultTypeInternal;
extern Render_settingsDefaultTypeInternal _Render_settings_default_instance_;
}  // namespace map_render_sittings
PROTOBUF_NAMESPACE_OPEN
template<> ::map_render_sittings::ColorRGB* Arena::CreateMaybeMessage<::map_render_sittings::ColorRGB>(Arena*);
template<> ::map_render_sittings::ColorString* Arena::CreateMaybeMessage<::map_render_sittings::ColorString>(Arena*);
template<> ::map_render_sittings::Point* Arena::CreateMaybeMessage<::map_render_sittings::Point>(Arena*);
template<> ::map_render_sittings::Render_settings* Arena::CreateMaybeMessage<::map_render_sittings::Render_settings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace map_render_sittings {

// ===================================================================

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map_render_sittings.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map_render_sittings.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5frenderer_2eproto);
    return ::descriptor_table_map_5frenderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:map_render_sittings.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class ColorString PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map_render_sittings.ColorString) */ {
 public:
  inline ColorString() : ColorString(nullptr) {}
  virtual ~ColorString();

  ColorString(const ColorString& from);
  ColorString(ColorString&& from) noexcept
    : ColorString() {
    *this = ::std::move(from);
  }

  inline ColorString& operator=(const ColorString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorString& operator=(ColorString&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorString* internal_default_instance() {
    return reinterpret_cast<const ColorString*>(
               &_ColorString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ColorString& a, ColorString& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorString* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorString* New() const final {
    return CreateMaybeMessage<ColorString>(nullptr);
  }

  ColorString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorString& from);
  void MergeFrom(const ColorString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map_render_sittings.ColorString";
  }
  protected:
  explicit ColorString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5frenderer_2eproto);
    return ::descriptor_table_map_5frenderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 2,
    kExcistFieldNumber = 1,
  };
  // string color = 2;
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // bool excist = 1;
  void clear_excist();
  bool excist() const;
  void set_excist(bool value);
  private:
  bool _internal_excist() const;
  void _internal_set_excist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:map_render_sittings.ColorString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  bool excist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class ColorRGB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map_render_sittings.ColorRGB) */ {
 public:
  inline ColorRGB() : ColorRGB(nullptr) {}
  virtual ~ColorRGB();

  ColorRGB(const ColorRGB& from);
  ColorRGB(ColorRGB&& from) noexcept
    : ColorRGB() {
    *this = ::std::move(from);
  }

  inline ColorRGB& operator=(const ColorRGB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorRGB& operator=(ColorRGB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorRGB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorRGB* internal_default_instance() {
    return reinterpret_cast<const ColorRGB*>(
               &_ColorRGB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ColorRGB& a, ColorRGB& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorRGB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorRGB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorRGB* New() const final {
    return CreateMaybeMessage<ColorRGB>(nullptr);
  }

  ColorRGB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorRGB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorRGB& from);
  void MergeFrom(const ColorRGB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorRGB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map_render_sittings.ColorRGB";
  }
  protected:
  explicit ColorRGB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5frenderer_2eproto);
    return ::descriptor_table_map_5frenderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcistFieldNumber = 1,
    kRedFieldNumber = 2,
    kGreenFieldNumber = 3,
    kBlueFieldNumber = 4,
  };
  // bool excist = 1;
  void clear_excist();
  bool excist() const;
  void set_excist(bool value);
  private:
  bool _internal_excist() const;
  void _internal_set_excist(bool value);
  public:

  // uint32 red = 2;
  void clear_red();
  ::PROTOBUF_NAMESPACE_ID::uint32 red() const;
  void set_red(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_red() const;
  void _internal_set_red(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 green = 3;
  void clear_green();
  ::PROTOBUF_NAMESPACE_ID::uint32 green() const;
  void set_green(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_green() const;
  void _internal_set_green(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 blue = 4;
  void clear_blue();
  ::PROTOBUF_NAMESPACE_ID::uint32 blue() const;
  void set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blue() const;
  void _internal_set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:map_render_sittings.ColorRGB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool excist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 red_;
  ::PROTOBUF_NAMESPACE_ID::uint32 green_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class Render_settings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map_render_sittings.Render_settings) */ {
 public:
  inline Render_settings() : Render_settings(nullptr) {}
  virtual ~Render_settings();

  Render_settings(const Render_settings& from);
  Render_settings(Render_settings&& from) noexcept
    : Render_settings() {
    *this = ::std::move(from);
  }

  inline Render_settings& operator=(const Render_settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Render_settings& operator=(Render_settings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Render_settings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Render_settings* internal_default_instance() {
    return reinterpret_cast<const Render_settings*>(
               &_Render_settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Render_settings& a, Render_settings& b) {
    a.Swap(&b);
  }
  inline void Swap(Render_settings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Render_settings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Render_settings* New() const final {
    return CreateMaybeMessage<Render_settings>(nullptr);
  }

  Render_settings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Render_settings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Render_settings& from);
  void MergeFrom(const Render_settings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Render_settings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map_render_sittings.Render_settings";
  }
  protected:
  explicit Render_settings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5frenderer_2eproto);
    return ::descriptor_table_map_5frenderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaletteRgbFieldNumber = 12,
    kPaletteStringFieldNumber = 13,
    kBusLableOffsetFieldNumber = 7,
    kUnderlayerColorStringFieldNumber = 9,
    kUnderlayerColorRgbFieldNumber = 10,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kLineWidthFieldNumber = 4,
    kStopRadiusFieldNumber = 5,
    kBusLableFontSizeFieldNumber = 6,
    kStopLableFontSizeFieldNumber = 8,
    kUnderlayerWidthFieldNumber = 11,
  };
  // repeated .map_render_sittings.ColorRGB palette_rgb = 12;
  int palette_rgb_size() const;
  private:
  int _internal_palette_rgb_size() const;
  public:
  void clear_palette_rgb();
  ::map_render_sittings::ColorRGB* mutable_palette_rgb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_render_sittings::ColorRGB >*
      mutable_palette_rgb();
  private:
  const ::map_render_sittings::ColorRGB& _internal_palette_rgb(int index) const;
  ::map_render_sittings::ColorRGB* _internal_add_palette_rgb();
  public:
  const ::map_render_sittings::ColorRGB& palette_rgb(int index) const;
  ::map_render_sittings::ColorRGB* add_palette_rgb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_render_sittings::ColorRGB >&
      palette_rgb() const;

  // repeated .map_render_sittings.ColorString palette_string = 13;
  int palette_string_size() const;
  private:
  int _internal_palette_string_size() const;
  public:
  void clear_palette_string();
  ::map_render_sittings::ColorString* mutable_palette_string(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_render_sittings::ColorString >*
      mutable_palette_string();
  private:
  const ::map_render_sittings::ColorString& _internal_palette_string(int index) const;
  ::map_render_sittings::ColorString* _internal_add_palette_string();
  public:
  const ::map_render_sittings::ColorString& palette_string(int index) const;
  ::map_render_sittings::ColorString* add_palette_string();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_render_sittings::ColorString >&
      palette_string() const;

  // .map_render_sittings.Point bus_lable_offset = 7;
  bool has_bus_lable_offset() const;
  private:
  bool _internal_has_bus_lable_offset() const;
  public:
  void clear_bus_lable_offset();
  const ::map_render_sittings::Point& bus_lable_offset() const;
  ::map_render_sittings::Point* release_bus_lable_offset();
  ::map_render_sittings::Point* mutable_bus_lable_offset();
  void set_allocated_bus_lable_offset(::map_render_sittings::Point* bus_lable_offset);
  private:
  const ::map_render_sittings::Point& _internal_bus_lable_offset() const;
  ::map_render_sittings::Point* _internal_mutable_bus_lable_offset();
  public:
  void unsafe_arena_set_allocated_bus_lable_offset(
      ::map_render_sittings::Point* bus_lable_offset);
  ::map_render_sittings::Point* unsafe_arena_release_bus_lable_offset();

  // .map_render_sittings.ColorString underlayer_color_string = 9;
  bool has_underlayer_color_string() const;
  private:
  bool _internal_has_underlayer_color_string() const;
  public:
  void clear_underlayer_color_string();
  const ::map_render_sittings::ColorString& underlayer_color_string() const;
  ::map_render_sittings::ColorString* release_underlayer_color_string();
  ::map_render_sittings::ColorString* mutable_underlayer_color_string();
  void set_allocated_underlayer_color_string(::map_render_sittings::ColorString* underlayer_color_string);
  private:
  const ::map_render_sittings::ColorString& _internal_underlayer_color_string() const;
  ::map_render_sittings::ColorString* _internal_mutable_underlayer_color_string();
  public:
  void unsafe_arena_set_allocated_underlayer_color_string(
      ::map_render_sittings::ColorString* underlayer_color_string);
  ::map_render_sittings::ColorString* unsafe_arena_release_underlayer_color_string();

  // .map_render_sittings.ColorRGB underlayer_color_rgb = 10;
  bool has_underlayer_color_rgb() const;
  private:
  bool _internal_has_underlayer_color_rgb() const;
  public:
  void clear_underlayer_color_rgb();
  const ::map_render_sittings::ColorRGB& underlayer_color_rgb() const;
  ::map_render_sittings::ColorRGB* release_underlayer_color_rgb();
  ::map_render_sittings::ColorRGB* mutable_underlayer_color_rgb();
  void set_allocated_underlayer_color_rgb(::map_render_sittings::ColorRGB* underlayer_color_rgb);
  private:
  const ::map_render_sittings::ColorRGB& _internal_underlayer_color_rgb() const;
  ::map_render_sittings::ColorRGB* _internal_mutable_underlayer_color_rgb();
  public:
  void unsafe_arena_set_allocated_underlayer_color_rgb(
      ::map_render_sittings::ColorRGB* underlayer_color_rgb);
  ::map_render_sittings::ColorRGB* unsafe_arena_release_underlayer_color_rgb();

  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 2;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double line_width = 4;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double stop_radius = 5;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // int32 bus_lable_font_size = 6;
  void clear_bus_lable_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 bus_lable_font_size() const;
  void set_bus_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bus_lable_font_size() const;
  void _internal_set_bus_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stop_lable_font_size = 8;
  void clear_stop_lable_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 stop_lable_font_size() const;
  void set_stop_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stop_lable_font_size() const;
  void _internal_set_stop_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double underlayer_width = 11;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:map_render_sittings.Render_settings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_render_sittings::ColorRGB > palette_rgb_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_render_sittings::ColorString > palette_string_;
  ::map_render_sittings::Point* bus_lable_offset_;
  ::map_render_sittings::ColorString* underlayer_color_string_;
  ::map_render_sittings::ColorRGB* underlayer_color_rgb_;
  double width_;
  double height_;
  double padding_;
  double line_width_;
  double stop_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 bus_lable_font_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stop_lable_font_size_;
  double underlayer_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.Point.y)
}

// -------------------------------------------------------------------

// ColorString

// bool excist = 1;
inline void ColorString::clear_excist() {
  excist_ = false;
}
inline bool ColorString::_internal_excist() const {
  return excist_;
}
inline bool ColorString::excist() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.ColorString.excist)
  return _internal_excist();
}
inline void ColorString::_internal_set_excist(bool value) {
  
  excist_ = value;
}
inline void ColorString::set_excist(bool value) {
  _internal_set_excist(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.ColorString.excist)
}

// string color = 2;
inline void ColorString::clear_color() {
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ColorString::color() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.ColorString.color)
  return _internal_color();
}
inline void ColorString::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.ColorString.color)
}
inline std::string* ColorString::mutable_color() {
  // @@protoc_insertion_point(field_mutable:map_render_sittings.ColorString.color)
  return _internal_mutable_color();
}
inline const std::string& ColorString::_internal_color() const {
  return color_.Get();
}
inline void ColorString::_internal_set_color(const std::string& value) {
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ColorString::set_color(std::string&& value) {
  
  color_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:map_render_sittings.ColorString.color)
}
inline void ColorString::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:map_render_sittings.ColorString.color)
}
inline void ColorString::set_color(const char* value,
    size_t size) {
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:map_render_sittings.ColorString.color)
}
inline std::string* ColorString::_internal_mutable_color() {
  
  return color_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ColorString::release_color() {
  // @@protoc_insertion_point(field_release:map_render_sittings.ColorString.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ColorString::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:map_render_sittings.ColorString.color)
}

// -------------------------------------------------------------------

// ColorRGB

// bool excist = 1;
inline void ColorRGB::clear_excist() {
  excist_ = false;
}
inline bool ColorRGB::_internal_excist() const {
  return excist_;
}
inline bool ColorRGB::excist() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.ColorRGB.excist)
  return _internal_excist();
}
inline void ColorRGB::_internal_set_excist(bool value) {
  
  excist_ = value;
}
inline void ColorRGB::set_excist(bool value) {
  _internal_set_excist(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.ColorRGB.excist)
}

// uint32 red = 2;
inline void ColorRGB::clear_red() {
  red_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorRGB::_internal_red() const {
  return red_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorRGB::red() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.ColorRGB.red)
  return _internal_red();
}
inline void ColorRGB::_internal_set_red(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  red_ = value;
}
inline void ColorRGB::set_red(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.ColorRGB.red)
}

// uint32 green = 3;
inline void ColorRGB::clear_green() {
  green_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorRGB::_internal_green() const {
  return green_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorRGB::green() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.ColorRGB.green)
  return _internal_green();
}
inline void ColorRGB::_internal_set_green(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  green_ = value;
}
inline void ColorRGB::set_green(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.ColorRGB.green)
}

// uint32 blue = 4;
inline void ColorRGB::clear_blue() {
  blue_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorRGB::_internal_blue() const {
  return blue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorRGB::blue() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.ColorRGB.blue)
  return _internal_blue();
}
inline void ColorRGB::_internal_set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blue_ = value;
}
inline void ColorRGB::set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.ColorRGB.blue)
}

// -------------------------------------------------------------------

// Render_settings

// double width = 1;
inline void Render_settings::clear_width() {
  width_ = 0;
}
inline double Render_settings::_internal_width() const {
  return width_;
}
inline double Render_settings::width() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.width)
  return _internal_width();
}
inline void Render_settings::_internal_set_width(double value) {
  
  width_ = value;
}
inline void Render_settings::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.Render_settings.width)
}

// double height = 2;
inline void Render_settings::clear_height() {
  height_ = 0;
}
inline double Render_settings::_internal_height() const {
  return height_;
}
inline double Render_settings::height() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.height)
  return _internal_height();
}
inline void Render_settings::_internal_set_height(double value) {
  
  height_ = value;
}
inline void Render_settings::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.Render_settings.height)
}

// double padding = 3;
inline void Render_settings::clear_padding() {
  padding_ = 0;
}
inline double Render_settings::_internal_padding() const {
  return padding_;
}
inline double Render_settings::padding() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.padding)
  return _internal_padding();
}
inline void Render_settings::_internal_set_padding(double value) {
  
  padding_ = value;
}
inline void Render_settings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.Render_settings.padding)
}

// double line_width = 4;
inline void Render_settings::clear_line_width() {
  line_width_ = 0;
}
inline double Render_settings::_internal_line_width() const {
  return line_width_;
}
inline double Render_settings::line_width() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.line_width)
  return _internal_line_width();
}
inline void Render_settings::_internal_set_line_width(double value) {
  
  line_width_ = value;
}
inline void Render_settings::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.Render_settings.line_width)
}

// double stop_radius = 5;
inline void Render_settings::clear_stop_radius() {
  stop_radius_ = 0;
}
inline double Render_settings::_internal_stop_radius() const {
  return stop_radius_;
}
inline double Render_settings::stop_radius() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.stop_radius)
  return _internal_stop_radius();
}
inline void Render_settings::_internal_set_stop_radius(double value) {
  
  stop_radius_ = value;
}
inline void Render_settings::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.Render_settings.stop_radius)
}

// int32 bus_lable_font_size = 6;
inline void Render_settings::clear_bus_lable_font_size() {
  bus_lable_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Render_settings::_internal_bus_lable_font_size() const {
  return bus_lable_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Render_settings::bus_lable_font_size() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.bus_lable_font_size)
  return _internal_bus_lable_font_size();
}
inline void Render_settings::_internal_set_bus_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bus_lable_font_size_ = value;
}
inline void Render_settings::set_bus_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bus_lable_font_size(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.Render_settings.bus_lable_font_size)
}

// .map_render_sittings.Point bus_lable_offset = 7;
inline bool Render_settings::_internal_has_bus_lable_offset() const {
  return this != internal_default_instance() && bus_lable_offset_ != nullptr;
}
inline bool Render_settings::has_bus_lable_offset() const {
  return _internal_has_bus_lable_offset();
}
inline void Render_settings::clear_bus_lable_offset() {
  if (GetArena() == nullptr && bus_lable_offset_ != nullptr) {
    delete bus_lable_offset_;
  }
  bus_lable_offset_ = nullptr;
}
inline const ::map_render_sittings::Point& Render_settings::_internal_bus_lable_offset() const {
  const ::map_render_sittings::Point* p = bus_lable_offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::map_render_sittings::Point*>(
      &::map_render_sittings::_Point_default_instance_);
}
inline const ::map_render_sittings::Point& Render_settings::bus_lable_offset() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.bus_lable_offset)
  return _internal_bus_lable_offset();
}
inline void Render_settings::unsafe_arena_set_allocated_bus_lable_offset(
    ::map_render_sittings::Point* bus_lable_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_lable_offset_);
  }
  bus_lable_offset_ = bus_lable_offset;
  if (bus_lable_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:map_render_sittings.Render_settings.bus_lable_offset)
}
inline ::map_render_sittings::Point* Render_settings::release_bus_lable_offset() {
  
  ::map_render_sittings::Point* temp = bus_lable_offset_;
  bus_lable_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::map_render_sittings::Point* Render_settings::unsafe_arena_release_bus_lable_offset() {
  // @@protoc_insertion_point(field_release:map_render_sittings.Render_settings.bus_lable_offset)
  
  ::map_render_sittings::Point* temp = bus_lable_offset_;
  bus_lable_offset_ = nullptr;
  return temp;
}
inline ::map_render_sittings::Point* Render_settings::_internal_mutable_bus_lable_offset() {
  
  if (bus_lable_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::map_render_sittings::Point>(GetArena());
    bus_lable_offset_ = p;
  }
  return bus_lable_offset_;
}
inline ::map_render_sittings::Point* Render_settings::mutable_bus_lable_offset() {
  // @@protoc_insertion_point(field_mutable:map_render_sittings.Render_settings.bus_lable_offset)
  return _internal_mutable_bus_lable_offset();
}
inline void Render_settings::set_allocated_bus_lable_offset(::map_render_sittings::Point* bus_lable_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bus_lable_offset_;
  }
  if (bus_lable_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bus_lable_offset);
    if (message_arena != submessage_arena) {
      bus_lable_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_lable_offset, submessage_arena);
    }
    
  } else {
    
  }
  bus_lable_offset_ = bus_lable_offset;
  // @@protoc_insertion_point(field_set_allocated:map_render_sittings.Render_settings.bus_lable_offset)
}

// int32 stop_lable_font_size = 8;
inline void Render_settings::clear_stop_lable_font_size() {
  stop_lable_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Render_settings::_internal_stop_lable_font_size() const {
  return stop_lable_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Render_settings::stop_lable_font_size() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.stop_lable_font_size)
  return _internal_stop_lable_font_size();
}
inline void Render_settings::_internal_set_stop_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stop_lable_font_size_ = value;
}
inline void Render_settings::set_stop_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stop_lable_font_size(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.Render_settings.stop_lable_font_size)
}

// .map_render_sittings.ColorString underlayer_color_string = 9;
inline bool Render_settings::_internal_has_underlayer_color_string() const {
  return this != internal_default_instance() && underlayer_color_string_ != nullptr;
}
inline bool Render_settings::has_underlayer_color_string() const {
  return _internal_has_underlayer_color_string();
}
inline void Render_settings::clear_underlayer_color_string() {
  if (GetArena() == nullptr && underlayer_color_string_ != nullptr) {
    delete underlayer_color_string_;
  }
  underlayer_color_string_ = nullptr;
}
inline const ::map_render_sittings::ColorString& Render_settings::_internal_underlayer_color_string() const {
  const ::map_render_sittings::ColorString* p = underlayer_color_string_;
  return p != nullptr ? *p : *reinterpret_cast<const ::map_render_sittings::ColorString*>(
      &::map_render_sittings::_ColorString_default_instance_);
}
inline const ::map_render_sittings::ColorString& Render_settings::underlayer_color_string() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.underlayer_color_string)
  return _internal_underlayer_color_string();
}
inline void Render_settings::unsafe_arena_set_allocated_underlayer_color_string(
    ::map_render_sittings::ColorString* underlayer_color_string) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayer_color_string_);
  }
  underlayer_color_string_ = underlayer_color_string;
  if (underlayer_color_string) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:map_render_sittings.Render_settings.underlayer_color_string)
}
inline ::map_render_sittings::ColorString* Render_settings::release_underlayer_color_string() {
  
  ::map_render_sittings::ColorString* temp = underlayer_color_string_;
  underlayer_color_string_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::map_render_sittings::ColorString* Render_settings::unsafe_arena_release_underlayer_color_string() {
  // @@protoc_insertion_point(field_release:map_render_sittings.Render_settings.underlayer_color_string)
  
  ::map_render_sittings::ColorString* temp = underlayer_color_string_;
  underlayer_color_string_ = nullptr;
  return temp;
}
inline ::map_render_sittings::ColorString* Render_settings::_internal_mutable_underlayer_color_string() {
  
  if (underlayer_color_string_ == nullptr) {
    auto* p = CreateMaybeMessage<::map_render_sittings::ColorString>(GetArena());
    underlayer_color_string_ = p;
  }
  return underlayer_color_string_;
}
inline ::map_render_sittings::ColorString* Render_settings::mutable_underlayer_color_string() {
  // @@protoc_insertion_point(field_mutable:map_render_sittings.Render_settings.underlayer_color_string)
  return _internal_mutable_underlayer_color_string();
}
inline void Render_settings::set_allocated_underlayer_color_string(::map_render_sittings::ColorString* underlayer_color_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete underlayer_color_string_;
  }
  if (underlayer_color_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(underlayer_color_string);
    if (message_arena != submessage_arena) {
      underlayer_color_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color_string, submessage_arena);
    }
    
  } else {
    
  }
  underlayer_color_string_ = underlayer_color_string;
  // @@protoc_insertion_point(field_set_allocated:map_render_sittings.Render_settings.underlayer_color_string)
}

// .map_render_sittings.ColorRGB underlayer_color_rgb = 10;
inline bool Render_settings::_internal_has_underlayer_color_rgb() const {
  return this != internal_default_instance() && underlayer_color_rgb_ != nullptr;
}
inline bool Render_settings::has_underlayer_color_rgb() const {
  return _internal_has_underlayer_color_rgb();
}
inline void Render_settings::clear_underlayer_color_rgb() {
  if (GetArena() == nullptr && underlayer_color_rgb_ != nullptr) {
    delete underlayer_color_rgb_;
  }
  underlayer_color_rgb_ = nullptr;
}
inline const ::map_render_sittings::ColorRGB& Render_settings::_internal_underlayer_color_rgb() const {
  const ::map_render_sittings::ColorRGB* p = underlayer_color_rgb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::map_render_sittings::ColorRGB*>(
      &::map_render_sittings::_ColorRGB_default_instance_);
}
inline const ::map_render_sittings::ColorRGB& Render_settings::underlayer_color_rgb() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.underlayer_color_rgb)
  return _internal_underlayer_color_rgb();
}
inline void Render_settings::unsafe_arena_set_allocated_underlayer_color_rgb(
    ::map_render_sittings::ColorRGB* underlayer_color_rgb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayer_color_rgb_);
  }
  underlayer_color_rgb_ = underlayer_color_rgb;
  if (underlayer_color_rgb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:map_render_sittings.Render_settings.underlayer_color_rgb)
}
inline ::map_render_sittings::ColorRGB* Render_settings::release_underlayer_color_rgb() {
  
  ::map_render_sittings::ColorRGB* temp = underlayer_color_rgb_;
  underlayer_color_rgb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::map_render_sittings::ColorRGB* Render_settings::unsafe_arena_release_underlayer_color_rgb() {
  // @@protoc_insertion_point(field_release:map_render_sittings.Render_settings.underlayer_color_rgb)
  
  ::map_render_sittings::ColorRGB* temp = underlayer_color_rgb_;
  underlayer_color_rgb_ = nullptr;
  return temp;
}
inline ::map_render_sittings::ColorRGB* Render_settings::_internal_mutable_underlayer_color_rgb() {
  
  if (underlayer_color_rgb_ == nullptr) {
    auto* p = CreateMaybeMessage<::map_render_sittings::ColorRGB>(GetArena());
    underlayer_color_rgb_ = p;
  }
  return underlayer_color_rgb_;
}
inline ::map_render_sittings::ColorRGB* Render_settings::mutable_underlayer_color_rgb() {
  // @@protoc_insertion_point(field_mutable:map_render_sittings.Render_settings.underlayer_color_rgb)
  return _internal_mutable_underlayer_color_rgb();
}
inline void Render_settings::set_allocated_underlayer_color_rgb(::map_render_sittings::ColorRGB* underlayer_color_rgb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete underlayer_color_rgb_;
  }
  if (underlayer_color_rgb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(underlayer_color_rgb);
    if (message_arena != submessage_arena) {
      underlayer_color_rgb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color_rgb, submessage_arena);
    }
    
  } else {
    
  }
  underlayer_color_rgb_ = underlayer_color_rgb;
  // @@protoc_insertion_point(field_set_allocated:map_render_sittings.Render_settings.underlayer_color_rgb)
}

// double underlayer_width = 11;
inline void Render_settings::clear_underlayer_width() {
  underlayer_width_ = 0;
}
inline double Render_settings::_internal_underlayer_width() const {
  return underlayer_width_;
}
inline double Render_settings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.underlayer_width)
  return _internal_underlayer_width();
}
inline void Render_settings::_internal_set_underlayer_width(double value) {
  
  underlayer_width_ = value;
}
inline void Render_settings::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:map_render_sittings.Render_settings.underlayer_width)
}

// repeated .map_render_sittings.ColorRGB palette_rgb = 12;
inline int Render_settings::_internal_palette_rgb_size() const {
  return palette_rgb_.size();
}
inline int Render_settings::palette_rgb_size() const {
  return _internal_palette_rgb_size();
}
inline void Render_settings::clear_palette_rgb() {
  palette_rgb_.Clear();
}
inline ::map_render_sittings::ColorRGB* Render_settings::mutable_palette_rgb(int index) {
  // @@protoc_insertion_point(field_mutable:map_render_sittings.Render_settings.palette_rgb)
  return palette_rgb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_render_sittings::ColorRGB >*
Render_settings::mutable_palette_rgb() {
  // @@protoc_insertion_point(field_mutable_list:map_render_sittings.Render_settings.palette_rgb)
  return &palette_rgb_;
}
inline const ::map_render_sittings::ColorRGB& Render_settings::_internal_palette_rgb(int index) const {
  return palette_rgb_.Get(index);
}
inline const ::map_render_sittings::ColorRGB& Render_settings::palette_rgb(int index) const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.palette_rgb)
  return _internal_palette_rgb(index);
}
inline ::map_render_sittings::ColorRGB* Render_settings::_internal_add_palette_rgb() {
  return palette_rgb_.Add();
}
inline ::map_render_sittings::ColorRGB* Render_settings::add_palette_rgb() {
  // @@protoc_insertion_point(field_add:map_render_sittings.Render_settings.palette_rgb)
  return _internal_add_palette_rgb();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_render_sittings::ColorRGB >&
Render_settings::palette_rgb() const {
  // @@protoc_insertion_point(field_list:map_render_sittings.Render_settings.palette_rgb)
  return palette_rgb_;
}

// repeated .map_render_sittings.ColorString palette_string = 13;
inline int Render_settings::_internal_palette_string_size() const {
  return palette_string_.size();
}
inline int Render_settings::palette_string_size() const {
  return _internal_palette_string_size();
}
inline void Render_settings::clear_palette_string() {
  palette_string_.Clear();
}
inline ::map_render_sittings::ColorString* Render_settings::mutable_palette_string(int index) {
  // @@protoc_insertion_point(field_mutable:map_render_sittings.Render_settings.palette_string)
  return palette_string_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_render_sittings::ColorString >*
Render_settings::mutable_palette_string() {
  // @@protoc_insertion_point(field_mutable_list:map_render_sittings.Render_settings.palette_string)
  return &palette_string_;
}
inline const ::map_render_sittings::ColorString& Render_settings::_internal_palette_string(int index) const {
  return palette_string_.Get(index);
}
inline const ::map_render_sittings::ColorString& Render_settings::palette_string(int index) const {
  // @@protoc_insertion_point(field_get:map_render_sittings.Render_settings.palette_string)
  return _internal_palette_string(index);
}
inline ::map_render_sittings::ColorString* Render_settings::_internal_add_palette_string() {
  return palette_string_.Add();
}
inline ::map_render_sittings::ColorString* Render_settings::add_palette_string() {
  // @@protoc_insertion_point(field_add:map_render_sittings.Render_settings.palette_string)
  return _internal_add_palette_string();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map_render_sittings::ColorString >&
Render_settings::palette_string() const {
  // @@protoc_insertion_point(field_list:map_render_sittings.Render_settings.palette_string)
  return palette_string_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace map_render_sittings

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto
