// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_renderer.proto

#include "map_renderer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_map_5frenderer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorRGB_map_5frenderer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_5frenderer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorString_map_5frenderer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_5frenderer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_map_5frenderer_2eproto;
namespace map_render_sittings {
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class ColorStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorString> _instance;
} _ColorString_default_instance_;
class ColorRGBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorRGB> _instance;
} _ColorRGB_default_instance_;
class Render_settingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Render_settings> _instance;
} _Render_settings_default_instance_;
}  // namespace map_render_sittings
static void InitDefaultsscc_info_ColorRGB_map_5frenderer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map_render_sittings::_ColorRGB_default_instance_;
    new (ptr) ::map_render_sittings::ColorRGB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map_render_sittings::ColorRGB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorRGB_map_5frenderer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColorRGB_map_5frenderer_2eproto}, {}};

static void InitDefaultsscc_info_ColorString_map_5frenderer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map_render_sittings::_ColorString_default_instance_;
    new (ptr) ::map_render_sittings::ColorString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map_render_sittings::ColorString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorString_map_5frenderer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColorString_map_5frenderer_2eproto}, {}};

static void InitDefaultsscc_info_Point_map_5frenderer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map_render_sittings::_Point_default_instance_;
    new (ptr) ::map_render_sittings::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map_render_sittings::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_map_5frenderer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_map_5frenderer_2eproto}, {}};

static void InitDefaultsscc_info_Render_settings_map_5frenderer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map_render_sittings::_Render_settings_default_instance_;
    new (ptr) ::map_render_sittings::Render_settings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map_render_sittings::Render_settings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Render_settings_map_5frenderer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Render_settings_map_5frenderer_2eproto}, {
      &scc_info_Point_map_5frenderer_2eproto.base,
      &scc_info_ColorString_map_5frenderer_2eproto.base,
      &scc_info_ColorRGB_map_5frenderer_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_5frenderer_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_map_5frenderer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_5frenderer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_5frenderer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Point, x_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Point, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::ColorString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::ColorString, excist_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::ColorString, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::ColorRGB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::ColorRGB, excist_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::ColorRGB, red_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::ColorRGB, green_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::ColorRGB, blue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, width_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, height_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, padding_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, line_width_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, stop_radius_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, bus_lable_font_size_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, bus_lable_offset_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, stop_lable_font_size_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, underlayer_color_string_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, underlayer_color_rgb_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, underlayer_width_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, palette_rgb_),
  PROTOBUF_FIELD_OFFSET(::map_render_sittings::Render_settings, palette_string_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::map_render_sittings::Point)},
  { 7, -1, sizeof(::map_render_sittings::ColorString)},
  { 14, -1, sizeof(::map_render_sittings::ColorRGB)},
  { 23, -1, sizeof(::map_render_sittings::Render_settings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map_render_sittings::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map_render_sittings::_ColorString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map_render_sittings::_ColorRGB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map_render_sittings::_Render_settings_default_instance_),
};

const char descriptor_table_protodef_map_5frenderer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022map_renderer.proto\022\023map_render_sitting"
  "s\"\035\n\005Point\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\",\n\013Colo"
  "rString\022\016\n\006excist\030\001 \001(\010\022\r\n\005color\030\002 \001(\t\"D"
  "\n\010ColorRGB\022\016\n\006excist\030\001 \001(\010\022\013\n\003red\030\002 \001(\r\022"
  "\r\n\005green\030\003 \001(\r\022\014\n\004blue\030\004 \001(\r\"\343\003\n\017Render_"
  "settings\022\r\n\005width\030\001 \001(\001\022\016\n\006height\030\002 \001(\001\022"
  "\017\n\007padding\030\003 \001(\001\022\022\n\nline_width\030\004 \001(\001\022\023\n\013"
  "stop_radius\030\005 \001(\001\022\033\n\023bus_lable_font_size"
  "\030\006 \001(\005\0224\n\020bus_lable_offset\030\007 \001(\0132\032.map_r"
  "ender_sittings.Point\022\034\n\024stop_lable_font_"
  "size\030\010 \001(\005\022A\n\027underlayer_color_string\030\t "
  "\001(\0132 .map_render_sittings.ColorString\022;\n"
  "\024underlayer_color_rgb\030\n \001(\0132\035.map_render"
  "_sittings.ColorRGB\022\030\n\020underlayer_width\030\013"
  " \001(\001\0222\n\013palette_rgb\030\014 \003(\0132\035.map_render_s"
  "ittings.ColorRGB\0228\n\016palette_string\030\r \003(\013"
  "2 .map_render_sittings.ColorStringb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_5frenderer_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_5frenderer_2eproto_sccs[4] = {
  &scc_info_ColorRGB_map_5frenderer_2eproto.base,
  &scc_info_ColorString_map_5frenderer_2eproto.base,
  &scc_info_Point_map_5frenderer_2eproto.base,
  &scc_info_Render_settings_map_5frenderer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_5frenderer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5frenderer_2eproto = {
  false, false, descriptor_table_protodef_map_5frenderer_2eproto, "map_renderer.proto", 682,
  &descriptor_table_map_5frenderer_2eproto_once, descriptor_table_map_5frenderer_2eproto_sccs, descriptor_table_map_5frenderer_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_map_5frenderer_2eproto::offsets,
  file_level_metadata_map_5frenderer_2eproto, 4, file_level_enum_descriptors_map_5frenderer_2eproto, file_level_service_descriptors_map_5frenderer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_5frenderer_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_5frenderer_2eproto)), true);
namespace map_render_sittings {

// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:map_render_sittings.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:map_render_sittings.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:map_render_sittings.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_map_5frenderer_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:map_render_sittings.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map_render_sittings.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map_render_sittings.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map_render_sittings.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map_render_sittings.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map_render_sittings.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map_render_sittings.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map_render_sittings.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map_render_sittings.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map_render_sittings.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColorString::InitAsDefaultInstance() {
}
class ColorString::_Internal {
 public:
};

ColorString::ColorString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:map_render_sittings.ColorString)
}
ColorString::ColorString(const ColorString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_color(),
      GetArena());
  }
  excist_ = from.excist_;
  // @@protoc_insertion_point(copy_constructor:map_render_sittings.ColorString)
}

void ColorString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColorString_map_5frenderer_2eproto.base);
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  excist_ = false;
}

ColorString::~ColorString() {
  // @@protoc_insertion_point(destructor:map_render_sittings.ColorString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ColorString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ColorString::ArenaDtor(void* object) {
  ColorString* _this = reinterpret_cast< ColorString* >(object);
  (void)_this;
}
void ColorString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorString& ColorString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorString_map_5frenderer_2eproto.base);
  return *internal_default_instance();
}


void ColorString::Clear() {
// @@protoc_insertion_point(message_clear_start:map_render_sittings.ColorString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  excist_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool excist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          excist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "map_render_sittings.ColorString.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map_render_sittings.ColorString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool excist = 1;
  if (this->excist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_excist(), target);
  }

  // string color = 2;
  if (this->color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "map_render_sittings.ColorString.color");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map_render_sittings.ColorString)
  return target;
}

size_t ColorString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map_render_sittings.ColorString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string color = 2;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // bool excist = 1;
  if (this->excist() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map_render_sittings.ColorString)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map_render_sittings.ColorString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map_render_sittings.ColorString)
    MergeFrom(*source);
  }
}

void ColorString::MergeFrom(const ColorString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map_render_sittings.ColorString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color().size() > 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.excist() != 0) {
    _internal_set_excist(from._internal_excist());
  }
}

void ColorString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map_render_sittings.ColorString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorString::CopyFrom(const ColorString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map_render_sittings.ColorString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorString::IsInitialized() const {
  return true;
}

void ColorString::InternalSwap(ColorString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  color_.Swap(&other->color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(excist_, other->excist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColorRGB::InitAsDefaultInstance() {
}
class ColorRGB::_Internal {
 public:
};

ColorRGB::ColorRGB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:map_render_sittings.ColorRGB)
}
ColorRGB::ColorRGB(const ColorRGB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&excist_, &from.excist_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&excist_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:map_render_sittings.ColorRGB)
}

void ColorRGB::SharedCtor() {
  ::memset(&excist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&excist_)) + sizeof(blue_));
}

ColorRGB::~ColorRGB() {
  // @@protoc_insertion_point(destructor:map_render_sittings.ColorRGB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ColorRGB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ColorRGB::ArenaDtor(void* object) {
  ColorRGB* _this = reinterpret_cast< ColorRGB* >(object);
  (void)_this;
}
void ColorRGB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColorRGB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorRGB& ColorRGB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorRGB_map_5frenderer_2eproto.base);
  return *internal_default_instance();
}


void ColorRGB::Clear() {
// @@protoc_insertion_point(message_clear_start:map_render_sittings.ColorRGB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&excist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&excist_)) + sizeof(blue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorRGB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool excist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          excist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 red = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 green = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorRGB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map_render_sittings.ColorRGB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool excist = 1;
  if (this->excist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_excist(), target);
  }

  // uint32 red = 2;
  if (this->red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_red(), target);
  }

  // uint32 green = 3;
  if (this->green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_green(), target);
  }

  // uint32 blue = 4;
  if (this->blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_blue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map_render_sittings.ColorRGB)
  return target;
}

size_t ColorRGB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map_render_sittings.ColorRGB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool excist = 1;
  if (this->excist() != 0) {
    total_size += 1 + 1;
  }

  // uint32 red = 2;
  if (this->red() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_red());
  }

  // uint32 green = 3;
  if (this->green() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_green());
  }

  // uint32 blue = 4;
  if (this->blue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorRGB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map_render_sittings.ColorRGB)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorRGB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorRGB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map_render_sittings.ColorRGB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map_render_sittings.ColorRGB)
    MergeFrom(*source);
  }
}

void ColorRGB::MergeFrom(const ColorRGB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map_render_sittings.ColorRGB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.excist() != 0) {
    _internal_set_excist(from._internal_excist());
  }
  if (from.red() != 0) {
    _internal_set_red(from._internal_red());
  }
  if (from.green() != 0) {
    _internal_set_green(from._internal_green());
  }
  if (from.blue() != 0) {
    _internal_set_blue(from._internal_blue());
  }
}

void ColorRGB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map_render_sittings.ColorRGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorRGB::CopyFrom(const ColorRGB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map_render_sittings.ColorRGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorRGB::IsInitialized() const {
  return true;
}

void ColorRGB::InternalSwap(ColorRGB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorRGB, blue_)
      + sizeof(ColorRGB::blue_)
      - PROTOBUF_FIELD_OFFSET(ColorRGB, excist_)>(
          reinterpret_cast<char*>(&excist_),
          reinterpret_cast<char*>(&other->excist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorRGB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Render_settings::InitAsDefaultInstance() {
  ::map_render_sittings::_Render_settings_default_instance_._instance.get_mutable()->bus_lable_offset_ = const_cast< ::map_render_sittings::Point*>(
      ::map_render_sittings::Point::internal_default_instance());
  ::map_render_sittings::_Render_settings_default_instance_._instance.get_mutable()->underlayer_color_string_ = const_cast< ::map_render_sittings::ColorString*>(
      ::map_render_sittings::ColorString::internal_default_instance());
  ::map_render_sittings::_Render_settings_default_instance_._instance.get_mutable()->underlayer_color_rgb_ = const_cast< ::map_render_sittings::ColorRGB*>(
      ::map_render_sittings::ColorRGB::internal_default_instance());
}
class Render_settings::_Internal {
 public:
  static const ::map_render_sittings::Point& bus_lable_offset(const Render_settings* msg);
  static const ::map_render_sittings::ColorString& underlayer_color_string(const Render_settings* msg);
  static const ::map_render_sittings::ColorRGB& underlayer_color_rgb(const Render_settings* msg);
};

const ::map_render_sittings::Point&
Render_settings::_Internal::bus_lable_offset(const Render_settings* msg) {
  return *msg->bus_lable_offset_;
}
const ::map_render_sittings::ColorString&
Render_settings::_Internal::underlayer_color_string(const Render_settings* msg) {
  return *msg->underlayer_color_string_;
}
const ::map_render_sittings::ColorRGB&
Render_settings::_Internal::underlayer_color_rgb(const Render_settings* msg) {
  return *msg->underlayer_color_rgb_;
}
Render_settings::Render_settings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  palette_rgb_(arena),
  palette_string_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:map_render_sittings.Render_settings)
}
Render_settings::Render_settings(const Render_settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      palette_rgb_(from.palette_rgb_),
      palette_string_(from.palette_string_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bus_lable_offset()) {
    bus_lable_offset_ = new ::map_render_sittings::Point(*from.bus_lable_offset_);
  } else {
    bus_lable_offset_ = nullptr;
  }
  if (from._internal_has_underlayer_color_string()) {
    underlayer_color_string_ = new ::map_render_sittings::ColorString(*from.underlayer_color_string_);
  } else {
    underlayer_color_string_ = nullptr;
  }
  if (from._internal_has_underlayer_color_rgb()) {
    underlayer_color_rgb_ = new ::map_render_sittings::ColorRGB(*from.underlayer_color_rgb_);
  } else {
    underlayer_color_rgb_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&underlayer_width_) -
    reinterpret_cast<char*>(&width_)) + sizeof(underlayer_width_));
  // @@protoc_insertion_point(copy_constructor:map_render_sittings.Render_settings)
}

void Render_settings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Render_settings_map_5frenderer_2eproto.base);
  ::memset(&bus_lable_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underlayer_width_) -
      reinterpret_cast<char*>(&bus_lable_offset_)) + sizeof(underlayer_width_));
}

Render_settings::~Render_settings() {
  // @@protoc_insertion_point(destructor:map_render_sittings.Render_settings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Render_settings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bus_lable_offset_;
  if (this != internal_default_instance()) delete underlayer_color_string_;
  if (this != internal_default_instance()) delete underlayer_color_rgb_;
}

void Render_settings::ArenaDtor(void* object) {
  Render_settings* _this = reinterpret_cast< Render_settings* >(object);
  (void)_this;
}
void Render_settings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Render_settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Render_settings& Render_settings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Render_settings_map_5frenderer_2eproto.base);
  return *internal_default_instance();
}


void Render_settings::Clear() {
// @@protoc_insertion_point(message_clear_start:map_render_sittings.Render_settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  palette_rgb_.Clear();
  palette_string_.Clear();
  if (GetArena() == nullptr && bus_lable_offset_ != nullptr) {
    delete bus_lable_offset_;
  }
  bus_lable_offset_ = nullptr;
  if (GetArena() == nullptr && underlayer_color_string_ != nullptr) {
    delete underlayer_color_string_;
  }
  underlayer_color_string_ = nullptr;
  if (GetArena() == nullptr && underlayer_color_rgb_ != nullptr) {
    delete underlayer_color_rgb_;
  }
  underlayer_color_rgb_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underlayer_width_) -
      reinterpret_cast<char*>(&width_)) + sizeof(underlayer_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Render_settings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double line_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          stop_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 bus_lable_font_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bus_lable_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .map_render_sittings.Point bus_lable_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus_lable_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stop_lable_font_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          stop_lable_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .map_render_sittings.ColorString underlayer_color_string = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlayer_color_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .map_render_sittings.ColorRGB underlayer_color_rgb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlayer_color_rgb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double underlayer_width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          underlayer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .map_render_sittings.ColorRGB palette_rgb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_palette_rgb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .map_render_sittings.ColorString palette_string = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_palette_string(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Render_settings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map_render_sittings.Render_settings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_width(), target);
  }

  // double height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_height(), target);
  }

  // double padding = 3;
  if (!(this->padding() <= 0 && this->padding() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_padding(), target);
  }

  // double line_width = 4;
  if (!(this->line_width() <= 0 && this->line_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_line_width(), target);
  }

  // double stop_radius = 5;
  if (!(this->stop_radius() <= 0 && this->stop_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_stop_radius(), target);
  }

  // int32 bus_lable_font_size = 6;
  if (this->bus_lable_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bus_lable_font_size(), target);
  }

  // .map_render_sittings.Point bus_lable_offset = 7;
  if (this->has_bus_lable_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bus_lable_offset(this), target, stream);
  }

  // int32 stop_lable_font_size = 8;
  if (this->stop_lable_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_stop_lable_font_size(), target);
  }

  // .map_render_sittings.ColorString underlayer_color_string = 9;
  if (this->has_underlayer_color_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::underlayer_color_string(this), target, stream);
  }

  // .map_render_sittings.ColorRGB underlayer_color_rgb = 10;
  if (this->has_underlayer_color_rgb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::underlayer_color_rgb(this), target, stream);
  }

  // double underlayer_width = 11;
  if (!(this->underlayer_width() <= 0 && this->underlayer_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_underlayer_width(), target);
  }

  // repeated .map_render_sittings.ColorRGB palette_rgb = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_palette_rgb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_palette_rgb(i), target, stream);
  }

  // repeated .map_render_sittings.ColorString palette_string = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_palette_string_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_palette_string(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map_render_sittings.Render_settings)
  return target;
}

size_t Render_settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map_render_sittings.Render_settings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .map_render_sittings.ColorRGB palette_rgb = 12;
  total_size += 1UL * this->_internal_palette_rgb_size();
  for (const auto& msg : this->palette_rgb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .map_render_sittings.ColorString palette_string = 13;
  total_size += 1UL * this->_internal_palette_string_size();
  for (const auto& msg : this->palette_string_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .map_render_sittings.Point bus_lable_offset = 7;
  if (this->has_bus_lable_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bus_lable_offset_);
  }

  // .map_render_sittings.ColorString underlayer_color_string = 9;
  if (this->has_underlayer_color_string()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *underlayer_color_string_);
  }

  // .map_render_sittings.ColorRGB underlayer_color_rgb = 10;
  if (this->has_underlayer_color_rgb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *underlayer_color_rgb_);
  }

  // double width = 1;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // double padding = 3;
  if (!(this->padding() <= 0 && this->padding() >= 0)) {
    total_size += 1 + 8;
  }

  // double line_width = 4;
  if (!(this->line_width() <= 0 && this->line_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop_radius = 5;
  if (!(this->stop_radius() <= 0 && this->stop_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 bus_lable_font_size = 6;
  if (this->bus_lable_font_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bus_lable_font_size());
  }

  // int32 stop_lable_font_size = 8;
  if (this->stop_lable_font_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stop_lable_font_size());
  }

  // double underlayer_width = 11;
  if (!(this->underlayer_width() <= 0 && this->underlayer_width() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Render_settings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map_render_sittings.Render_settings)
  GOOGLE_DCHECK_NE(&from, this);
  const Render_settings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Render_settings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map_render_sittings.Render_settings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map_render_sittings.Render_settings)
    MergeFrom(*source);
  }
}

void Render_settings::MergeFrom(const Render_settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map_render_sittings.Render_settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  palette_rgb_.MergeFrom(from.palette_rgb_);
  palette_string_.MergeFrom(from.palette_string_);
  if (from.has_bus_lable_offset()) {
    _internal_mutable_bus_lable_offset()->::map_render_sittings::Point::MergeFrom(from._internal_bus_lable_offset());
  }
  if (from.has_underlayer_color_string()) {
    _internal_mutable_underlayer_color_string()->::map_render_sittings::ColorString::MergeFrom(from._internal_underlayer_color_string());
  }
  if (from.has_underlayer_color_rgb()) {
    _internal_mutable_underlayer_color_rgb()->::map_render_sittings::ColorRGB::MergeFrom(from._internal_underlayer_color_rgb());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.padding() <= 0 && from.padding() >= 0)) {
    _internal_set_padding(from._internal_padding());
  }
  if (!(from.line_width() <= 0 && from.line_width() >= 0)) {
    _internal_set_line_width(from._internal_line_width());
  }
  if (!(from.stop_radius() <= 0 && from.stop_radius() >= 0)) {
    _internal_set_stop_radius(from._internal_stop_radius());
  }
  if (from.bus_lable_font_size() != 0) {
    _internal_set_bus_lable_font_size(from._internal_bus_lable_font_size());
  }
  if (from.stop_lable_font_size() != 0) {
    _internal_set_stop_lable_font_size(from._internal_stop_lable_font_size());
  }
  if (!(from.underlayer_width() <= 0 && from.underlayer_width() >= 0)) {
    _internal_set_underlayer_width(from._internal_underlayer_width());
  }
}

void Render_settings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map_render_sittings.Render_settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Render_settings::CopyFrom(const Render_settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map_render_sittings.Render_settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Render_settings::IsInitialized() const {
  return true;
}

void Render_settings::InternalSwap(Render_settings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  palette_rgb_.InternalSwap(&other->palette_rgb_);
  palette_string_.InternalSwap(&other->palette_string_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Render_settings, underlayer_width_)
      + sizeof(Render_settings::underlayer_width_)
      - PROTOBUF_FIELD_OFFSET(Render_settings, bus_lable_offset_)>(
          reinterpret_cast<char*>(&bus_lable_offset_),
          reinterpret_cast<char*>(&other->bus_lable_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Render_settings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace map_render_sittings
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::map_render_sittings::Point* Arena::CreateMaybeMessage< ::map_render_sittings::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::map_render_sittings::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::map_render_sittings::ColorString* Arena::CreateMaybeMessage< ::map_render_sittings::ColorString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::map_render_sittings::ColorString >(arena);
}
template<> PROTOBUF_NOINLINE ::map_render_sittings::ColorRGB* Arena::CreateMaybeMessage< ::map_render_sittings::ColorRGB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::map_render_sittings::ColorRGB >(arena);
}
template<> PROTOBUF_NOINLINE ::map_render_sittings::Render_settings* Arena::CreateMaybeMessage< ::map_render_sittings::Render_settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::map_render_sittings::Render_settings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
