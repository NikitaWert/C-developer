// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace graph_serialize {
class Edge;
class EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgeForGraf;
class EdgeForGrafDefaultTypeInternal;
extern EdgeForGrafDefaultTypeInternal _EdgeForGraf_default_instance_;
class EdgeInfo;
class EdgeInfoDefaultTypeInternal;
extern EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
class Graph;
class GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class IncidenceList;
class IncidenceListDefaultTypeInternal;
extern IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
class NameToVertex;
class NameToVertexDefaultTypeInternal;
extern NameToVertexDefaultTypeInternal _NameToVertex_default_instance_;
class VertexBeginAndEnd;
class VertexBeginAndEndDefaultTypeInternal;
extern VertexBeginAndEndDefaultTypeInternal _VertexBeginAndEnd_default_instance_;
class VertexToName;
class VertexToNameDefaultTypeInternal;
extern VertexToNameDefaultTypeInternal _VertexToName_default_instance_;
}  // namespace graph_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::graph_serialize::Edge* Arena::CreateMaybeMessage<::graph_serialize::Edge>(Arena*);
template<> ::graph_serialize::EdgeForGraf* Arena::CreateMaybeMessage<::graph_serialize::EdgeForGraf>(Arena*);
template<> ::graph_serialize::EdgeInfo* Arena::CreateMaybeMessage<::graph_serialize::EdgeInfo>(Arena*);
template<> ::graph_serialize::Graph* Arena::CreateMaybeMessage<::graph_serialize::Graph>(Arena*);
template<> ::graph_serialize::IncidenceList* Arena::CreateMaybeMessage<::graph_serialize::IncidenceList>(Arena*);
template<> ::graph_serialize::NameToVertex* Arena::CreateMaybeMessage<::graph_serialize::NameToVertex>(Arena*);
template<> ::graph_serialize::VertexBeginAndEnd* Arena::CreateMaybeMessage<::graph_serialize::VertexBeginAndEnd>(Arena*);
template<> ::graph_serialize::VertexToName* Arena::CreateMaybeMessage<::graph_serialize::VertexToName>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace graph_serialize {

// ===================================================================

class VertexToName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.VertexToName) */ {
 public:
  inline VertexToName() : VertexToName(nullptr) {}
  virtual ~VertexToName();

  VertexToName(const VertexToName& from);
  VertexToName(VertexToName&& from) noexcept
    : VertexToName() {
    *this = ::std::move(from);
  }

  inline VertexToName& operator=(const VertexToName& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexToName& operator=(VertexToName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VertexToName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VertexToName* internal_default_instance() {
    return reinterpret_cast<const VertexToName*>(
               &_VertexToName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VertexToName& a, VertexToName& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexToName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexToName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexToName* New() const final {
    return CreateMaybeMessage<VertexToName>(nullptr);
  }

  VertexToName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexToName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VertexToName& from);
  void MergeFrom(const VertexToName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexToName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.VertexToName";
  }
  protected:
  explicit VertexToName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated uint32 id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_id() const;
  void _internal_add_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 id(int index) const;
  void set_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_id();

  // repeated string name = 2;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // @@protoc_insertion_point(class_scope:graph_serialize.VertexToName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class VertexBeginAndEnd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.VertexBeginAndEnd) */ {
 public:
  inline VertexBeginAndEnd() : VertexBeginAndEnd(nullptr) {}
  virtual ~VertexBeginAndEnd();

  VertexBeginAndEnd(const VertexBeginAndEnd& from);
  VertexBeginAndEnd(VertexBeginAndEnd&& from) noexcept
    : VertexBeginAndEnd() {
    *this = ::std::move(from);
  }

  inline VertexBeginAndEnd& operator=(const VertexBeginAndEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexBeginAndEnd& operator=(VertexBeginAndEnd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VertexBeginAndEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VertexBeginAndEnd* internal_default_instance() {
    return reinterpret_cast<const VertexBeginAndEnd*>(
               &_VertexBeginAndEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VertexBeginAndEnd& a, VertexBeginAndEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexBeginAndEnd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexBeginAndEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexBeginAndEnd* New() const final {
    return CreateMaybeMessage<VertexBeginAndEnd>(nullptr);
  }

  VertexBeginAndEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexBeginAndEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VertexBeginAndEnd& from);
  void MergeFrom(const VertexBeginAndEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexBeginAndEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.VertexBeginAndEnd";
  }
  protected:
  explicit VertexBeginAndEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // uint32 begin = 1;
  void clear_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 begin() const;
  void set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_begin() const;
  void _internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 end = 2;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:graph_serialize.VertexBeginAndEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 begin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class NameToVertex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.NameToVertex) */ {
 public:
  inline NameToVertex() : NameToVertex(nullptr) {}
  virtual ~NameToVertex();

  NameToVertex(const NameToVertex& from);
  NameToVertex(NameToVertex&& from) noexcept
    : NameToVertex() {
    *this = ::std::move(from);
  }

  inline NameToVertex& operator=(const NameToVertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameToVertex& operator=(NameToVertex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameToVertex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameToVertex* internal_default_instance() {
    return reinterpret_cast<const NameToVertex*>(
               &_NameToVertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NameToVertex& a, NameToVertex& b) {
    a.Swap(&b);
  }
  inline void Swap(NameToVertex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameToVertex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameToVertex* New() const final {
    return CreateMaybeMessage<NameToVertex>(nullptr);
  }

  NameToVertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameToVertex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameToVertex& from);
  void MergeFrom(const NameToVertex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameToVertex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.NameToVertex";
  }
  protected:
  explicit NameToVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // repeated .graph_serialize.VertexBeginAndEnd id = 2;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  ::graph_serialize::VertexBeginAndEnd* mutable_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::VertexBeginAndEnd >*
      mutable_id();
  private:
  const ::graph_serialize::VertexBeginAndEnd& _internal_id(int index) const;
  ::graph_serialize::VertexBeginAndEnd* _internal_add_id();
  public:
  const ::graph_serialize::VertexBeginAndEnd& id(int index) const;
  ::graph_serialize::VertexBeginAndEnd* add_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::VertexBeginAndEnd >&
      id() const;

  // @@protoc_insertion_point(class_scope:graph_serialize.NameToVertex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::VertexBeginAndEnd > id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class EdgeForGraf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.EdgeForGraf) */ {
 public:
  inline EdgeForGraf() : EdgeForGraf(nullptr) {}
  virtual ~EdgeForGraf();

  EdgeForGraf(const EdgeForGraf& from);
  EdgeForGraf(EdgeForGraf&& from) noexcept
    : EdgeForGraf() {
    *this = ::std::move(from);
  }

  inline EdgeForGraf& operator=(const EdgeForGraf& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeForGraf& operator=(EdgeForGraf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgeForGraf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeForGraf* internal_default_instance() {
    return reinterpret_cast<const EdgeForGraf*>(
               &_EdgeForGraf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EdgeForGraf& a, EdgeForGraf& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeForGraf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeForGraf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeForGraf* New() const final {
    return CreateMaybeMessage<EdgeForGraf>(nullptr);
  }

  EdgeForGraf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeForGraf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeForGraf& from);
  void MergeFrom(const EdgeForGraf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeForGraf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.EdgeForGraf";
  }
  protected:
  explicit EdgeForGraf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNameFieldNumber = 3,
    kTimeFieldNumber = 1,
    kSpanCountFieldNumber = 2,
  };
  // string bus_name = 3;
  void clear_bus_name();
  const std::string& bus_name() const;
  void set_bus_name(const std::string& value);
  void set_bus_name(std::string&& value);
  void set_bus_name(const char* value);
  void set_bus_name(const char* value, size_t size);
  std::string* mutable_bus_name();
  std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // int32 span_count = 2;
  void clear_span_count();
  ::PROTOBUF_NAMESPACE_ID::int32 span_count() const;
  void set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_span_count() const;
  void _internal_set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:graph_serialize.EdgeForGraf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
  double time_;
  ::PROTOBUF_NAMESPACE_ID::int32 span_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class EdgeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.EdgeInfo) */ {
 public:
  inline EdgeInfo() : EdgeInfo(nullptr) {}
  virtual ~EdgeInfo();

  EdgeInfo(const EdgeInfo& from);
  EdgeInfo(EdgeInfo&& from) noexcept
    : EdgeInfo() {
    *this = ::std::move(from);
  }

  inline EdgeInfo& operator=(const EdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeInfo& operator=(EdgeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeInfo*>(
               &_EdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EdgeInfo& a, EdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeInfo* New() const final {
    return CreateMaybeMessage<EdgeInfo>(nullptr);
  }

  EdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeInfo& from);
  void MergeFrom(const EdgeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.EdgeInfo";
  }
  protected:
  explicit EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kEdgeFieldNumber = 2,
  };
  // repeated uint32 id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_id() const;
  void _internal_add_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 id(int index) const;
  void set_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_id();

  // repeated .graph_serialize.EdgeForGraf edge = 2;
  int edge_size() const;
  private:
  int _internal_edge_size() const;
  public:
  void clear_edge();
  ::graph_serialize::EdgeForGraf* mutable_edge(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::EdgeForGraf >*
      mutable_edge();
  private:
  const ::graph_serialize::EdgeForGraf& _internal_edge(int index) const;
  ::graph_serialize::EdgeForGraf* _internal_add_edge();
  public:
  const ::graph_serialize::EdgeForGraf& edge(int index) const;
  ::graph_serialize::EdgeForGraf* add_edge();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::EdgeForGraf >&
      edge() const;

  // @@protoc_insertion_point(class_scope:graph_serialize.EdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::EdgeForGraf > edge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class IncidenceList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.IncidenceList) */ {
 public:
  inline IncidenceList() : IncidenceList(nullptr) {}
  virtual ~IncidenceList();

  IncidenceList(const IncidenceList& from);
  IncidenceList(IncidenceList&& from) noexcept
    : IncidenceList() {
    *this = ::std::move(from);
  }

  inline IncidenceList& operator=(const IncidenceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidenceList& operator=(IncidenceList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IncidenceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncidenceList* internal_default_instance() {
    return reinterpret_cast<const IncidenceList*>(
               &_IncidenceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IncidenceList& a, IncidenceList& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidenceList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidenceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncidenceList* New() const final {
    return CreateMaybeMessage<IncidenceList>(nullptr);
  }

  IncidenceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncidenceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IncidenceList& from);
  void MergeFrom(const IncidenceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidenceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.IncidenceList";
  }
  protected:
  explicit IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeIdFieldNumber = 1,
  };
  // repeated uint32 edge_id = 1;
  int edge_id_size() const;
  private:
  int _internal_edge_id_size() const;
  public:
  void clear_edge_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_edge_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_edge_id() const;
  void _internal_add_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_edge_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_id(int index) const;
  void set_edge_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      edge_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_edge_id();

  // @@protoc_insertion_point(class_scope:graph_serialize.IncidenceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > edge_id_;
  mutable std::atomic<int> _edge_id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Edge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  virtual ~Edge();

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return CreateMaybeMessage<Edge>(nullptr);
  }

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint64 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double weight = 3;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:graph_serialize.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_;
  double weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Graph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.Graph) */ {
 public:
  inline Graph() : Graph(nullptr) {}
  virtual ~Graph();

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Graph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Graph* New() const final {
    return CreateMaybeMessage<Graph>(nullptr);
  }

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
    kIncidienceListsFieldNumber = 2,
    kInfoFieldNumber = 3,
    kNameToFieldNumber = 4,
    kVertexToFieldNumber = 5,
  };
  // repeated .graph_serialize.Edge edges = 1;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::graph_serialize::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::Edge >*
      mutable_edges();
  private:
  const ::graph_serialize::Edge& _internal_edges(int index) const;
  ::graph_serialize::Edge* _internal_add_edges();
  public:
  const ::graph_serialize::Edge& edges(int index) const;
  ::graph_serialize::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::Edge >&
      edges() const;

  // repeated .graph_serialize.IncidenceList incidience_lists = 2;
  int incidience_lists_size() const;
  private:
  int _internal_incidience_lists_size() const;
  public:
  void clear_incidience_lists();
  ::graph_serialize::IncidenceList* mutable_incidience_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::IncidenceList >*
      mutable_incidience_lists();
  private:
  const ::graph_serialize::IncidenceList& _internal_incidience_lists(int index) const;
  ::graph_serialize::IncidenceList* _internal_add_incidience_lists();
  public:
  const ::graph_serialize::IncidenceList& incidience_lists(int index) const;
  ::graph_serialize::IncidenceList* add_incidience_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::IncidenceList >&
      incidience_lists() const;

  // .graph_serialize.EdgeInfo info = 3;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::graph_serialize::EdgeInfo& info() const;
  ::graph_serialize::EdgeInfo* release_info();
  ::graph_serialize::EdgeInfo* mutable_info();
  void set_allocated_info(::graph_serialize::EdgeInfo* info);
  private:
  const ::graph_serialize::EdgeInfo& _internal_info() const;
  ::graph_serialize::EdgeInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::graph_serialize::EdgeInfo* info);
  ::graph_serialize::EdgeInfo* unsafe_arena_release_info();

  // .graph_serialize.NameToVertex name_to = 4;
  bool has_name_to() const;
  private:
  bool _internal_has_name_to() const;
  public:
  void clear_name_to();
  const ::graph_serialize::NameToVertex& name_to() const;
  ::graph_serialize::NameToVertex* release_name_to();
  ::graph_serialize::NameToVertex* mutable_name_to();
  void set_allocated_name_to(::graph_serialize::NameToVertex* name_to);
  private:
  const ::graph_serialize::NameToVertex& _internal_name_to() const;
  ::graph_serialize::NameToVertex* _internal_mutable_name_to();
  public:
  void unsafe_arena_set_allocated_name_to(
      ::graph_serialize::NameToVertex* name_to);
  ::graph_serialize::NameToVertex* unsafe_arena_release_name_to();

  // .graph_serialize.VertexToName vertex_to = 5;
  bool has_vertex_to() const;
  private:
  bool _internal_has_vertex_to() const;
  public:
  void clear_vertex_to();
  const ::graph_serialize::VertexToName& vertex_to() const;
  ::graph_serialize::VertexToName* release_vertex_to();
  ::graph_serialize::VertexToName* mutable_vertex_to();
  void set_allocated_vertex_to(::graph_serialize::VertexToName* vertex_to);
  private:
  const ::graph_serialize::VertexToName& _internal_vertex_to() const;
  ::graph_serialize::VertexToName* _internal_mutable_vertex_to();
  public:
  void unsafe_arena_set_allocated_vertex_to(
      ::graph_serialize::VertexToName* vertex_to);
  ::graph_serialize::VertexToName* unsafe_arena_release_vertex_to();

  // @@protoc_insertion_point(class_scope:graph_serialize.Graph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::Edge > edges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::IncidenceList > incidience_lists_;
  ::graph_serialize::EdgeInfo* info_;
  ::graph_serialize::NameToVertex* name_to_;
  ::graph_serialize::VertexToName* vertex_to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VertexToName

// repeated uint32 id = 1;
inline int VertexToName::_internal_id_size() const {
  return id_.size();
}
inline int VertexToName::id_size() const {
  return _internal_id_size();
}
inline void VertexToName::clear_id() {
  id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VertexToName::_internal_id(int index) const {
  return id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VertexToName::id(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.VertexToName.id)
  return _internal_id(index);
}
inline void VertexToName::set_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:graph_serialize.VertexToName.id)
}
inline void VertexToName::_internal_add_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  id_.Add(value);
}
inline void VertexToName::add_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:graph_serialize.VertexToName.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VertexToName::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
VertexToName::id() const {
  // @@protoc_insertion_point(field_list:graph_serialize.VertexToName.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VertexToName::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
VertexToName::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.VertexToName.id)
  return _internal_mutable_id();
}

// repeated string name = 2;
inline int VertexToName::_internal_name_size() const {
  return name_.size();
}
inline int VertexToName::name_size() const {
  return _internal_name_size();
}
inline void VertexToName::clear_name() {
  name_.Clear();
}
inline std::string* VertexToName::add_name() {
  // @@protoc_insertion_point(field_add_mutable:graph_serialize.VertexToName.name)
  return _internal_add_name();
}
inline const std::string& VertexToName::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& VertexToName::name(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.VertexToName.name)
  return _internal_name(index);
}
inline std::string* VertexToName::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:graph_serialize.VertexToName.name)
  return name_.Mutable(index);
}
inline void VertexToName::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:graph_serialize.VertexToName.name)
  name_.Mutable(index)->assign(value);
}
inline void VertexToName::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:graph_serialize.VertexToName.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void VertexToName::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:graph_serialize.VertexToName.name)
}
inline void VertexToName::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:graph_serialize.VertexToName.name)
}
inline std::string* VertexToName::_internal_add_name() {
  return name_.Add();
}
inline void VertexToName::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:graph_serialize.VertexToName.name)
}
inline void VertexToName::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:graph_serialize.VertexToName.name)
}
inline void VertexToName::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:graph_serialize.VertexToName.name)
}
inline void VertexToName::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:graph_serialize.VertexToName.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VertexToName::name() const {
  // @@protoc_insertion_point(field_list:graph_serialize.VertexToName.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VertexToName::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.VertexToName.name)
  return &name_;
}

// -------------------------------------------------------------------

// VertexBeginAndEnd

// uint32 begin = 1;
inline void VertexBeginAndEnd::clear_begin() {
  begin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VertexBeginAndEnd::_internal_begin() const {
  return begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VertexBeginAndEnd::begin() const {
  // @@protoc_insertion_point(field_get:graph_serialize.VertexBeginAndEnd.begin)
  return _internal_begin();
}
inline void VertexBeginAndEnd::_internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  begin_ = value;
}
inline void VertexBeginAndEnd::set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_begin(value);
  // @@protoc_insertion_point(field_set:graph_serialize.VertexBeginAndEnd.begin)
}

// uint32 end = 2;
inline void VertexBeginAndEnd::clear_end() {
  end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VertexBeginAndEnd::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VertexBeginAndEnd::end() const {
  // @@protoc_insertion_point(field_get:graph_serialize.VertexBeginAndEnd.end)
  return _internal_end();
}
inline void VertexBeginAndEnd::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_ = value;
}
inline void VertexBeginAndEnd::set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:graph_serialize.VertexBeginAndEnd.end)
}

// -------------------------------------------------------------------

// NameToVertex

// repeated string name = 1;
inline int NameToVertex::_internal_name_size() const {
  return name_.size();
}
inline int NameToVertex::name_size() const {
  return _internal_name_size();
}
inline void NameToVertex::clear_name() {
  name_.Clear();
}
inline std::string* NameToVertex::add_name() {
  // @@protoc_insertion_point(field_add_mutable:graph_serialize.NameToVertex.name)
  return _internal_add_name();
}
inline const std::string& NameToVertex::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& NameToVertex::name(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.NameToVertex.name)
  return _internal_name(index);
}
inline std::string* NameToVertex::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:graph_serialize.NameToVertex.name)
  return name_.Mutable(index);
}
inline void NameToVertex::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:graph_serialize.NameToVertex.name)
  name_.Mutable(index)->assign(value);
}
inline void NameToVertex::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:graph_serialize.NameToVertex.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void NameToVertex::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:graph_serialize.NameToVertex.name)
}
inline void NameToVertex::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:graph_serialize.NameToVertex.name)
}
inline std::string* NameToVertex::_internal_add_name() {
  return name_.Add();
}
inline void NameToVertex::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:graph_serialize.NameToVertex.name)
}
inline void NameToVertex::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:graph_serialize.NameToVertex.name)
}
inline void NameToVertex::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:graph_serialize.NameToVertex.name)
}
inline void NameToVertex::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:graph_serialize.NameToVertex.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NameToVertex::name() const {
  // @@protoc_insertion_point(field_list:graph_serialize.NameToVertex.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NameToVertex::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.NameToVertex.name)
  return &name_;
}

// repeated .graph_serialize.VertexBeginAndEnd id = 2;
inline int NameToVertex::_internal_id_size() const {
  return id_.size();
}
inline int NameToVertex::id_size() const {
  return _internal_id_size();
}
inline void NameToVertex::clear_id() {
  id_.Clear();
}
inline ::graph_serialize::VertexBeginAndEnd* NameToVertex::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:graph_serialize.NameToVertex.id)
  return id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::VertexBeginAndEnd >*
NameToVertex::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.NameToVertex.id)
  return &id_;
}
inline const ::graph_serialize::VertexBeginAndEnd& NameToVertex::_internal_id(int index) const {
  return id_.Get(index);
}
inline const ::graph_serialize::VertexBeginAndEnd& NameToVertex::id(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.NameToVertex.id)
  return _internal_id(index);
}
inline ::graph_serialize::VertexBeginAndEnd* NameToVertex::_internal_add_id() {
  return id_.Add();
}
inline ::graph_serialize::VertexBeginAndEnd* NameToVertex::add_id() {
  // @@protoc_insertion_point(field_add:graph_serialize.NameToVertex.id)
  return _internal_add_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::VertexBeginAndEnd >&
NameToVertex::id() const {
  // @@protoc_insertion_point(field_list:graph_serialize.NameToVertex.id)
  return id_;
}

// -------------------------------------------------------------------

// EdgeForGraf

// double time = 1;
inline void EdgeForGraf::clear_time() {
  time_ = 0;
}
inline double EdgeForGraf::_internal_time() const {
  return time_;
}
inline double EdgeForGraf::time() const {
  // @@protoc_insertion_point(field_get:graph_serialize.EdgeForGraf.time)
  return _internal_time();
}
inline void EdgeForGraf::_internal_set_time(double value) {
  
  time_ = value;
}
inline void EdgeForGraf::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:graph_serialize.EdgeForGraf.time)
}

// int32 span_count = 2;
inline void EdgeForGraf::clear_span_count() {
  span_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EdgeForGraf::_internal_span_count() const {
  return span_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EdgeForGraf::span_count() const {
  // @@protoc_insertion_point(field_get:graph_serialize.EdgeForGraf.span_count)
  return _internal_span_count();
}
inline void EdgeForGraf::_internal_set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  span_count_ = value;
}
inline void EdgeForGraf::set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_span_count(value);
  // @@protoc_insertion_point(field_set:graph_serialize.EdgeForGraf.span_count)
}

// string bus_name = 3;
inline void EdgeForGraf::clear_bus_name() {
  bus_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EdgeForGraf::bus_name() const {
  // @@protoc_insertion_point(field_get:graph_serialize.EdgeForGraf.bus_name)
  return _internal_bus_name();
}
inline void EdgeForGraf::set_bus_name(const std::string& value) {
  _internal_set_bus_name(value);
  // @@protoc_insertion_point(field_set:graph_serialize.EdgeForGraf.bus_name)
}
inline std::string* EdgeForGraf::mutable_bus_name() {
  // @@protoc_insertion_point(field_mutable:graph_serialize.EdgeForGraf.bus_name)
  return _internal_mutable_bus_name();
}
inline const std::string& EdgeForGraf::_internal_bus_name() const {
  return bus_name_.Get();
}
inline void EdgeForGraf::_internal_set_bus_name(const std::string& value) {
  
  bus_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EdgeForGraf::set_bus_name(std::string&& value) {
  
  bus_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:graph_serialize.EdgeForGraf.bus_name)
}
inline void EdgeForGraf::set_bus_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bus_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:graph_serialize.EdgeForGraf.bus_name)
}
inline void EdgeForGraf::set_bus_name(const char* value,
    size_t size) {
  
  bus_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:graph_serialize.EdgeForGraf.bus_name)
}
inline std::string* EdgeForGraf::_internal_mutable_bus_name() {
  
  return bus_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EdgeForGraf::release_bus_name() {
  // @@protoc_insertion_point(field_release:graph_serialize.EdgeForGraf.bus_name)
  return bus_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EdgeForGraf::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  bus_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bus_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:graph_serialize.EdgeForGraf.bus_name)
}

// -------------------------------------------------------------------

// EdgeInfo

// repeated uint32 id = 1;
inline int EdgeInfo::_internal_id_size() const {
  return id_.size();
}
inline int EdgeInfo::id_size() const {
  return _internal_id_size();
}
inline void EdgeInfo::clear_id() {
  id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgeInfo::_internal_id(int index) const {
  return id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgeInfo::id(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.EdgeInfo.id)
  return _internal_id(index);
}
inline void EdgeInfo::set_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:graph_serialize.EdgeInfo.id)
}
inline void EdgeInfo::_internal_add_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  id_.Add(value);
}
inline void EdgeInfo::add_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:graph_serialize.EdgeInfo.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EdgeInfo::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EdgeInfo::id() const {
  // @@protoc_insertion_point(field_list:graph_serialize.EdgeInfo.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EdgeInfo::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EdgeInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.EdgeInfo.id)
  return _internal_mutable_id();
}

// repeated .graph_serialize.EdgeForGraf edge = 2;
inline int EdgeInfo::_internal_edge_size() const {
  return edge_.size();
}
inline int EdgeInfo::edge_size() const {
  return _internal_edge_size();
}
inline void EdgeInfo::clear_edge() {
  edge_.Clear();
}
inline ::graph_serialize::EdgeForGraf* EdgeInfo::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:graph_serialize.EdgeInfo.edge)
  return edge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::EdgeForGraf >*
EdgeInfo::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.EdgeInfo.edge)
  return &edge_;
}
inline const ::graph_serialize::EdgeForGraf& EdgeInfo::_internal_edge(int index) const {
  return edge_.Get(index);
}
inline const ::graph_serialize::EdgeForGraf& EdgeInfo::edge(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.EdgeInfo.edge)
  return _internal_edge(index);
}
inline ::graph_serialize::EdgeForGraf* EdgeInfo::_internal_add_edge() {
  return edge_.Add();
}
inline ::graph_serialize::EdgeForGraf* EdgeInfo::add_edge() {
  // @@protoc_insertion_point(field_add:graph_serialize.EdgeInfo.edge)
  return _internal_add_edge();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::EdgeForGraf >&
EdgeInfo::edge() const {
  // @@protoc_insertion_point(field_list:graph_serialize.EdgeInfo.edge)
  return edge_;
}

// -------------------------------------------------------------------

// IncidenceList

// repeated uint32 edge_id = 1;
inline int IncidenceList::_internal_edge_id_size() const {
  return edge_id_.size();
}
inline int IncidenceList::edge_id_size() const {
  return _internal_edge_id_size();
}
inline void IncidenceList::clear_edge_id() {
  edge_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncidenceList::_internal_edge_id(int index) const {
  return edge_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncidenceList::edge_id(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.IncidenceList.edge_id)
  return _internal_edge_id(index);
}
inline void IncidenceList::set_edge_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:graph_serialize.IncidenceList.edge_id)
}
inline void IncidenceList::_internal_add_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_id_.Add(value);
}
inline void IncidenceList::add_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_edge_id(value);
  // @@protoc_insertion_point(field_add:graph_serialize.IncidenceList.edge_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IncidenceList::_internal_edge_id() const {
  return edge_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IncidenceList::edge_id() const {
  // @@protoc_insertion_point(field_list:graph_serialize.IncidenceList.edge_id)
  return _internal_edge_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IncidenceList::_internal_mutable_edge_id() {
  return &edge_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IncidenceList::mutable_edge_id() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.IncidenceList.edge_id)
  return _internal_mutable_edge_id();
}

// -------------------------------------------------------------------

// Edge

// uint64 from = 1;
inline void Edge::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Edge::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Edge::from() const {
  // @@protoc_insertion_point(field_get:graph_serialize.Edge.from)
  return _internal_from();
}
inline void Edge::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  from_ = value;
}
inline void Edge::set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:graph_serialize.Edge.from)
}

// uint64 to = 2;
inline void Edge::clear_to() {
  to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Edge::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Edge::to() const {
  // @@protoc_insertion_point(field_get:graph_serialize.Edge.to)
  return _internal_to();
}
inline void Edge::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_ = value;
}
inline void Edge::set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:graph_serialize.Edge.to)
}

// double weight = 3;
inline void Edge::clear_weight() {
  weight_ = 0;
}
inline double Edge::_internal_weight() const {
  return weight_;
}
inline double Edge::weight() const {
  // @@protoc_insertion_point(field_get:graph_serialize.Edge.weight)
  return _internal_weight();
}
inline void Edge::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void Edge::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:graph_serialize.Edge.weight)
}

// -------------------------------------------------------------------

// Graph

// repeated .graph_serialize.Edge edges = 1;
inline int Graph::_internal_edges_size() const {
  return edges_.size();
}
inline int Graph::edges_size() const {
  return _internal_edges_size();
}
inline void Graph::clear_edges() {
  edges_.Clear();
}
inline ::graph_serialize::Edge* Graph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:graph_serialize.Graph.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::Edge >*
Graph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.Graph.edges)
  return &edges_;
}
inline const ::graph_serialize::Edge& Graph::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::graph_serialize::Edge& Graph::edges(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.Graph.edges)
  return _internal_edges(index);
}
inline ::graph_serialize::Edge* Graph::_internal_add_edges() {
  return edges_.Add();
}
inline ::graph_serialize::Edge* Graph::add_edges() {
  // @@protoc_insertion_point(field_add:graph_serialize.Graph.edges)
  return _internal_add_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::Edge >&
Graph::edges() const {
  // @@protoc_insertion_point(field_list:graph_serialize.Graph.edges)
  return edges_;
}

// repeated .graph_serialize.IncidenceList incidience_lists = 2;
inline int Graph::_internal_incidience_lists_size() const {
  return incidience_lists_.size();
}
inline int Graph::incidience_lists_size() const {
  return _internal_incidience_lists_size();
}
inline void Graph::clear_incidience_lists() {
  incidience_lists_.Clear();
}
inline ::graph_serialize::IncidenceList* Graph::mutable_incidience_lists(int index) {
  // @@protoc_insertion_point(field_mutable:graph_serialize.Graph.incidience_lists)
  return incidience_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::IncidenceList >*
Graph::mutable_incidience_lists() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.Graph.incidience_lists)
  return &incidience_lists_;
}
inline const ::graph_serialize::IncidenceList& Graph::_internal_incidience_lists(int index) const {
  return incidience_lists_.Get(index);
}
inline const ::graph_serialize::IncidenceList& Graph::incidience_lists(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.Graph.incidience_lists)
  return _internal_incidience_lists(index);
}
inline ::graph_serialize::IncidenceList* Graph::_internal_add_incidience_lists() {
  return incidience_lists_.Add();
}
inline ::graph_serialize::IncidenceList* Graph::add_incidience_lists() {
  // @@protoc_insertion_point(field_add:graph_serialize.Graph.incidience_lists)
  return _internal_add_incidience_lists();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::IncidenceList >&
Graph::incidience_lists() const {
  // @@protoc_insertion_point(field_list:graph_serialize.Graph.incidience_lists)
  return incidience_lists_;
}

// .graph_serialize.EdgeInfo info = 3;
inline bool Graph::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool Graph::has_info() const {
  return _internal_has_info();
}
inline void Graph::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::graph_serialize::EdgeInfo& Graph::_internal_info() const {
  const ::graph_serialize::EdgeInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::graph_serialize::EdgeInfo*>(
      &::graph_serialize::_EdgeInfo_default_instance_);
}
inline const ::graph_serialize::EdgeInfo& Graph::info() const {
  // @@protoc_insertion_point(field_get:graph_serialize.Graph.info)
  return _internal_info();
}
inline void Graph::unsafe_arena_set_allocated_info(
    ::graph_serialize::EdgeInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:graph_serialize.Graph.info)
}
inline ::graph_serialize::EdgeInfo* Graph::release_info() {
  
  ::graph_serialize::EdgeInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::graph_serialize::EdgeInfo* Graph::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:graph_serialize.Graph.info)
  
  ::graph_serialize::EdgeInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::graph_serialize::EdgeInfo* Graph::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::graph_serialize::EdgeInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::graph_serialize::EdgeInfo* Graph::mutable_info() {
  // @@protoc_insertion_point(field_mutable:graph_serialize.Graph.info)
  return _internal_mutable_info();
}
inline void Graph::set_allocated_info(::graph_serialize::EdgeInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:graph_serialize.Graph.info)
}

// .graph_serialize.NameToVertex name_to = 4;
inline bool Graph::_internal_has_name_to() const {
  return this != internal_default_instance() && name_to_ != nullptr;
}
inline bool Graph::has_name_to() const {
  return _internal_has_name_to();
}
inline void Graph::clear_name_to() {
  if (GetArena() == nullptr && name_to_ != nullptr) {
    delete name_to_;
  }
  name_to_ = nullptr;
}
inline const ::graph_serialize::NameToVertex& Graph::_internal_name_to() const {
  const ::graph_serialize::NameToVertex* p = name_to_;
  return p != nullptr ? *p : *reinterpret_cast<const ::graph_serialize::NameToVertex*>(
      &::graph_serialize::_NameToVertex_default_instance_);
}
inline const ::graph_serialize::NameToVertex& Graph::name_to() const {
  // @@protoc_insertion_point(field_get:graph_serialize.Graph.name_to)
  return _internal_name_to();
}
inline void Graph::unsafe_arena_set_allocated_name_to(
    ::graph_serialize::NameToVertex* name_to) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_to_);
  }
  name_to_ = name_to;
  if (name_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:graph_serialize.Graph.name_to)
}
inline ::graph_serialize::NameToVertex* Graph::release_name_to() {
  
  ::graph_serialize::NameToVertex* temp = name_to_;
  name_to_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::graph_serialize::NameToVertex* Graph::unsafe_arena_release_name_to() {
  // @@protoc_insertion_point(field_release:graph_serialize.Graph.name_to)
  
  ::graph_serialize::NameToVertex* temp = name_to_;
  name_to_ = nullptr;
  return temp;
}
inline ::graph_serialize::NameToVertex* Graph::_internal_mutable_name_to() {
  
  if (name_to_ == nullptr) {
    auto* p = CreateMaybeMessage<::graph_serialize::NameToVertex>(GetArena());
    name_to_ = p;
  }
  return name_to_;
}
inline ::graph_serialize::NameToVertex* Graph::mutable_name_to() {
  // @@protoc_insertion_point(field_mutable:graph_serialize.Graph.name_to)
  return _internal_mutable_name_to();
}
inline void Graph::set_allocated_name_to(::graph_serialize::NameToVertex* name_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete name_to_;
  }
  if (name_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(name_to);
    if (message_arena != submessage_arena) {
      name_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_to, submessage_arena);
    }
    
  } else {
    
  }
  name_to_ = name_to;
  // @@protoc_insertion_point(field_set_allocated:graph_serialize.Graph.name_to)
}

// .graph_serialize.VertexToName vertex_to = 5;
inline bool Graph::_internal_has_vertex_to() const {
  return this != internal_default_instance() && vertex_to_ != nullptr;
}
inline bool Graph::has_vertex_to() const {
  return _internal_has_vertex_to();
}
inline void Graph::clear_vertex_to() {
  if (GetArena() == nullptr && vertex_to_ != nullptr) {
    delete vertex_to_;
  }
  vertex_to_ = nullptr;
}
inline const ::graph_serialize::VertexToName& Graph::_internal_vertex_to() const {
  const ::graph_serialize::VertexToName* p = vertex_to_;
  return p != nullptr ? *p : *reinterpret_cast<const ::graph_serialize::VertexToName*>(
      &::graph_serialize::_VertexToName_default_instance_);
}
inline const ::graph_serialize::VertexToName& Graph::vertex_to() const {
  // @@protoc_insertion_point(field_get:graph_serialize.Graph.vertex_to)
  return _internal_vertex_to();
}
inline void Graph::unsafe_arena_set_allocated_vertex_to(
    ::graph_serialize::VertexToName* vertex_to) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertex_to_);
  }
  vertex_to_ = vertex_to;
  if (vertex_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:graph_serialize.Graph.vertex_to)
}
inline ::graph_serialize::VertexToName* Graph::release_vertex_to() {
  
  ::graph_serialize::VertexToName* temp = vertex_to_;
  vertex_to_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::graph_serialize::VertexToName* Graph::unsafe_arena_release_vertex_to() {
  // @@protoc_insertion_point(field_release:graph_serialize.Graph.vertex_to)
  
  ::graph_serialize::VertexToName* temp = vertex_to_;
  vertex_to_ = nullptr;
  return temp;
}
inline ::graph_serialize::VertexToName* Graph::_internal_mutable_vertex_to() {
  
  if (vertex_to_ == nullptr) {
    auto* p = CreateMaybeMessage<::graph_serialize::VertexToName>(GetArena());
    vertex_to_ = p;
  }
  return vertex_to_;
}
inline ::graph_serialize::VertexToName* Graph::mutable_vertex_to() {
  // @@protoc_insertion_point(field_mutable:graph_serialize.Graph.vertex_to)
  return _internal_mutable_vertex_to();
}
inline void Graph::set_allocated_vertex_to(::graph_serialize::VertexToName* vertex_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vertex_to_;
  }
  if (vertex_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vertex_to);
    if (message_arena != submessage_arena) {
      vertex_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertex_to, submessage_arena);
    }
    
  } else {
    
  }
  vertex_to_ = vertex_to;
  // @@protoc_insertion_point(field_set_allocated:graph_serialize.Graph.vertex_to)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
