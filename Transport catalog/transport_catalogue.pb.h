// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace transport_set {
class Bus;
class BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Coordinates;
class CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class DistanceBetweenStops;
class DistanceBetweenStopsDefaultTypeInternal;
extern DistanceBetweenStopsDefaultTypeInternal _DistanceBetweenStops_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Render_settings;
class Render_settingsDefaultTypeInternal;
extern Render_settingsDefaultTypeInternal _Render_settings_default_instance_;
class Stop;
class StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class Transport_set;
class Transport_setDefaultTypeInternal;
extern Transport_setDefaultTypeInternal _Transport_set_default_instance_;
}  // namespace transport_set
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_set::Bus* Arena::CreateMaybeMessage<::transport_set::Bus>(Arena*);
template<> ::transport_set::Coordinates* Arena::CreateMaybeMessage<::transport_set::Coordinates>(Arena*);
template<> ::transport_set::DistanceBetweenStops* Arena::CreateMaybeMessage<::transport_set::DistanceBetweenStops>(Arena*);
template<> ::transport_set::Point* Arena::CreateMaybeMessage<::transport_set::Point>(Arena*);
template<> ::transport_set::Render_settings* Arena::CreateMaybeMessage<::transport_set::Render_settings>(Arena*);
template<> ::transport_set::Stop* Arena::CreateMaybeMessage<::transport_set::Stop>(Arena*);
template<> ::transport_set::Transport_set* Arena::CreateMaybeMessage<::transport_set::Transport_set>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_set {

// ===================================================================

class Coordinates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_set.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  virtual ~Coordinates();

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coordinates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinates* New() const final {
    return CreateMaybeMessage<Coordinates>(nullptr);
  }

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coordinates& from);
  void MergeFrom(const Coordinates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_set.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_set.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lng_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class DistanceBetweenStops PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_set.DistanceBetweenStops) */ {
 public:
  inline DistanceBetweenStops() : DistanceBetweenStops(nullptr) {}
  virtual ~DistanceBetweenStops();

  DistanceBetweenStops(const DistanceBetweenStops& from);
  DistanceBetweenStops(DistanceBetweenStops&& from) noexcept
    : DistanceBetweenStops() {
    *this = ::std::move(from);
  }

  inline DistanceBetweenStops& operator=(const DistanceBetweenStops& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceBetweenStops& operator=(DistanceBetweenStops&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DistanceBetweenStops& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistanceBetweenStops* internal_default_instance() {
    return reinterpret_cast<const DistanceBetweenStops*>(
               &_DistanceBetweenStops_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DistanceBetweenStops& a, DistanceBetweenStops& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceBetweenStops* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceBetweenStops* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistanceBetweenStops* New() const final {
    return CreateMaybeMessage<DistanceBetweenStops>(nullptr);
  }

  DistanceBetweenStops* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistanceBetweenStops>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DistanceBetweenStops& from);
  void MergeFrom(const DistanceBetweenStops& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceBetweenStops* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_set.DistanceBetweenStops";
  }
  protected:
  explicit DistanceBetweenStops(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFromFieldNumber = 1,
    kStopToFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // int32 stop_from = 1;
  void clear_stop_from();
  ::PROTOBUF_NAMESPACE_ID::int32 stop_from() const;
  void set_stop_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stop_from() const;
  void _internal_set_stop_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stop_to = 2;
  void clear_stop_to();
  ::PROTOBUF_NAMESPACE_ID::int32 stop_to() const;
  void set_stop_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stop_to() const;
  void _internal_set_stop_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double distance = 3;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_set.DistanceBetweenStops)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 stop_from_;
  ::PROTOBUF_NAMESPACE_ID::int32 stop_to_;
  double distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_set.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  virtual ~Bus();

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bus* New() const final {
    return CreateMaybeMessage<Bus>(nullptr);
  }

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bus& from);
  void MergeFrom(const Bus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_set.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexStopsFieldNumber = 3,
    kNumberBusFieldNumber = 1,
    kCirclFieldNumber = 2,
  };
  // repeated uint32 index_stops = 3;
  int index_stops_size() const;
  private:
  int _internal_index_stops_size() const;
  public:
  void clear_index_stops();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index_stops(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_index_stops() const;
  void _internal_add_index_stops(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_index_stops();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 index_stops(int index) const;
  void set_index_stops(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_index_stops(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      index_stops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_index_stops();

  // string number_bus = 1;
  void clear_number_bus();
  const std::string& number_bus() const;
  void set_number_bus(const std::string& value);
  void set_number_bus(std::string&& value);
  void set_number_bus(const char* value);
  void set_number_bus(const char* value, size_t size);
  std::string* mutable_number_bus();
  std::string* release_number_bus();
  void set_allocated_number_bus(std::string* number_bus);
  private:
  const std::string& _internal_number_bus() const;
  void _internal_set_number_bus(const std::string& value);
  std::string* _internal_mutable_number_bus();
  public:

  // bool circl = 2;
  void clear_circl();
  bool circl() const;
  void set_circl(bool value);
  private:
  bool _internal_circl() const;
  void _internal_set_circl(bool value);
  public:

  // @@protoc_insertion_point(class_scope:transport_set.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > index_stops_;
  mutable std::atomic<int> _index_stops_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_bus_;
  bool circl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_set.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  virtual ~Stop();

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stop* New() const final {
    return CreateMaybeMessage<Stop>(nullptr);
  }

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stop& from);
  void MergeFrom(const Stop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_set.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameBusStopFieldNumber = 1,
    kCordinatesFieldNumber = 2,
  };
  // string name_bus_stop = 1;
  void clear_name_bus_stop();
  const std::string& name_bus_stop() const;
  void set_name_bus_stop(const std::string& value);
  void set_name_bus_stop(std::string&& value);
  void set_name_bus_stop(const char* value);
  void set_name_bus_stop(const char* value, size_t size);
  std::string* mutable_name_bus_stop();
  std::string* release_name_bus_stop();
  void set_allocated_name_bus_stop(std::string* name_bus_stop);
  private:
  const std::string& _internal_name_bus_stop() const;
  void _internal_set_name_bus_stop(const std::string& value);
  std::string* _internal_mutable_name_bus_stop();
  public:

  // .transport_set.Coordinates cordinates = 2;
  bool has_cordinates() const;
  private:
  bool _internal_has_cordinates() const;
  public:
  void clear_cordinates();
  const ::transport_set::Coordinates& cordinates() const;
  ::transport_set::Coordinates* release_cordinates();
  ::transport_set::Coordinates* mutable_cordinates();
  void set_allocated_cordinates(::transport_set::Coordinates* cordinates);
  private:
  const ::transport_set::Coordinates& _internal_cordinates() const;
  ::transport_set::Coordinates* _internal_mutable_cordinates();
  public:
  void unsafe_arena_set_allocated_cordinates(
      ::transport_set::Coordinates* cordinates);
  ::transport_set::Coordinates* unsafe_arena_release_cordinates();

  // @@protoc_insertion_point(class_scope:transport_set.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_bus_stop_;
  ::transport_set::Coordinates* cordinates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_set.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_set.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_set.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Render_settings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_set.Render_settings) */ {
 public:
  inline Render_settings() : Render_settings(nullptr) {}
  virtual ~Render_settings();

  Render_settings(const Render_settings& from);
  Render_settings(Render_settings&& from) noexcept
    : Render_settings() {
    *this = ::std::move(from);
  }

  inline Render_settings& operator=(const Render_settings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Render_settings& operator=(Render_settings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Render_settings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Render_settings* internal_default_instance() {
    return reinterpret_cast<const Render_settings*>(
               &_Render_settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Render_settings& a, Render_settings& b) {
    a.Swap(&b);
  }
  inline void Swap(Render_settings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Render_settings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Render_settings* New() const final {
    return CreateMaybeMessage<Render_settings>(nullptr);
  }

  Render_settings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Render_settings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Render_settings& from);
  void MergeFrom(const Render_settings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Render_settings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_set.Render_settings";
  }
  protected:
  explicit Render_settings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaletteStringFieldNumber = 12,
    kUnderlayerColorStringFieldNumber = 10,
    kBusLableOffsetFieldNumber = 7,
    kStopLabelOffsetFieldNumber = 9,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kLineWidthFieldNumber = 4,
    kStopRadiusFieldNumber = 5,
    kBusLableFontSizeFieldNumber = 6,
    kStopLableFontSizeFieldNumber = 8,
    kUnderlayerWidthFieldNumber = 11,
  };
  // repeated string palette_string = 12;
  int palette_string_size() const;
  private:
  int _internal_palette_string_size() const;
  public:
  void clear_palette_string();
  const std::string& palette_string(int index) const;
  std::string* mutable_palette_string(int index);
  void set_palette_string(int index, const std::string& value);
  void set_palette_string(int index, std::string&& value);
  void set_palette_string(int index, const char* value);
  void set_palette_string(int index, const char* value, size_t size);
  std::string* add_palette_string();
  void add_palette_string(const std::string& value);
  void add_palette_string(std::string&& value);
  void add_palette_string(const char* value);
  void add_palette_string(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& palette_string() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_palette_string();
  private:
  const std::string& _internal_palette_string(int index) const;
  std::string* _internal_add_palette_string();
  public:

  // string underlayer_color_string = 10;
  void clear_underlayer_color_string();
  const std::string& underlayer_color_string() const;
  void set_underlayer_color_string(const std::string& value);
  void set_underlayer_color_string(std::string&& value);
  void set_underlayer_color_string(const char* value);
  void set_underlayer_color_string(const char* value, size_t size);
  std::string* mutable_underlayer_color_string();
  std::string* release_underlayer_color_string();
  void set_allocated_underlayer_color_string(std::string* underlayer_color_string);
  private:
  const std::string& _internal_underlayer_color_string() const;
  void _internal_set_underlayer_color_string(const std::string& value);
  std::string* _internal_mutable_underlayer_color_string();
  public:

  // .transport_set.Point bus_lable_offset = 7;
  bool has_bus_lable_offset() const;
  private:
  bool _internal_has_bus_lable_offset() const;
  public:
  void clear_bus_lable_offset();
  const ::transport_set::Point& bus_lable_offset() const;
  ::transport_set::Point* release_bus_lable_offset();
  ::transport_set::Point* mutable_bus_lable_offset();
  void set_allocated_bus_lable_offset(::transport_set::Point* bus_lable_offset);
  private:
  const ::transport_set::Point& _internal_bus_lable_offset() const;
  ::transport_set::Point* _internal_mutable_bus_lable_offset();
  public:
  void unsafe_arena_set_allocated_bus_lable_offset(
      ::transport_set::Point* bus_lable_offset);
  ::transport_set::Point* unsafe_arena_release_bus_lable_offset();

  // .transport_set.Point stop_label_offset = 9;
  bool has_stop_label_offset() const;
  private:
  bool _internal_has_stop_label_offset() const;
  public:
  void clear_stop_label_offset();
  const ::transport_set::Point& stop_label_offset() const;
  ::transport_set::Point* release_stop_label_offset();
  ::transport_set::Point* mutable_stop_label_offset();
  void set_allocated_stop_label_offset(::transport_set::Point* stop_label_offset);
  private:
  const ::transport_set::Point& _internal_stop_label_offset() const;
  ::transport_set::Point* _internal_mutable_stop_label_offset();
  public:
  void unsafe_arena_set_allocated_stop_label_offset(
      ::transport_set::Point* stop_label_offset);
  ::transport_set::Point* unsafe_arena_release_stop_label_offset();

  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 2;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double line_width = 4;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double stop_radius = 5;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // int32 bus_lable_font_size = 6;
  void clear_bus_lable_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 bus_lable_font_size() const;
  void set_bus_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bus_lable_font_size() const;
  void _internal_set_bus_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stop_lable_font_size = 8;
  void clear_stop_lable_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 stop_lable_font_size() const;
  void set_stop_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stop_lable_font_size() const;
  void _internal_set_stop_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double underlayer_width = 11;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_set.Render_settings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> palette_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlayer_color_string_;
  ::transport_set::Point* bus_lable_offset_;
  ::transport_set::Point* stop_label_offset_;
  double width_;
  double height_;
  double padding_;
  double line_width_;
  double stop_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 bus_lable_font_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stop_lable_font_size_;
  double underlayer_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Transport_set PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_set.Transport_set) */ {
 public:
  inline Transport_set() : Transport_set(nullptr) {}
  virtual ~Transport_set();

  Transport_set(const Transport_set& from);
  Transport_set(Transport_set&& from) noexcept
    : Transport_set() {
    *this = ::std::move(from);
  }

  inline Transport_set& operator=(const Transport_set& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transport_set& operator=(Transport_set&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transport_set& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transport_set* internal_default_instance() {
    return reinterpret_cast<const Transport_set*>(
               &_Transport_set_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Transport_set& a, Transport_set& b) {
    a.Swap(&b);
  }
  inline void Swap(Transport_set* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transport_set* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transport_set* New() const final {
    return CreateMaybeMessage<Transport_set>(nullptr);
  }

  Transport_set* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transport_set>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transport_set& from);
  void MergeFrom(const Transport_set& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transport_set* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_set.Transport_set";
  }
  protected:
  explicit Transport_set(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalogue_2eproto);
    return ::descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesFieldNumber = 1,
    kStopsFieldNumber = 2,
    kDistanceFieldNumber = 3,
    kRenFieldNumber = 4,
    kGraphFieldNumber = 5,
  };
  // repeated .transport_set.Bus buses = 1;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::transport_set::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::Bus >*
      mutable_buses();
  private:
  const ::transport_set::Bus& _internal_buses(int index) const;
  ::transport_set::Bus* _internal_add_buses();
  public:
  const ::transport_set::Bus& buses(int index) const;
  ::transport_set::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::Bus >&
      buses() const;

  // repeated .transport_set.Stop stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::transport_set::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::Stop >*
      mutable_stops();
  private:
  const ::transport_set::Stop& _internal_stops(int index) const;
  ::transport_set::Stop* _internal_add_stops();
  public:
  const ::transport_set::Stop& stops(int index) const;
  ::transport_set::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::Stop >&
      stops() const;

  // repeated .transport_set.DistanceBetweenStops distance = 3;
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  ::transport_set::DistanceBetweenStops* mutable_distance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::DistanceBetweenStops >*
      mutable_distance();
  private:
  const ::transport_set::DistanceBetweenStops& _internal_distance(int index) const;
  ::transport_set::DistanceBetweenStops* _internal_add_distance();
  public:
  const ::transport_set::DistanceBetweenStops& distance(int index) const;
  ::transport_set::DistanceBetweenStops* add_distance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::DistanceBetweenStops >&
      distance() const;

  // .transport_set.Render_settings ren = 4;
  bool has_ren() const;
  private:
  bool _internal_has_ren() const;
  public:
  void clear_ren();
  const ::transport_set::Render_settings& ren() const;
  ::transport_set::Render_settings* release_ren();
  ::transport_set::Render_settings* mutable_ren();
  void set_allocated_ren(::transport_set::Render_settings* ren);
  private:
  const ::transport_set::Render_settings& _internal_ren() const;
  ::transport_set::Render_settings* _internal_mutable_ren();
  public:
  void unsafe_arena_set_allocated_ren(
      ::transport_set::Render_settings* ren);
  ::transport_set::Render_settings* unsafe_arena_release_ren();

  // .graph_serialize.Graph graph = 5;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::graph_serialize::Graph& graph() const;
  ::graph_serialize::Graph* release_graph();
  ::graph_serialize::Graph* mutable_graph();
  void set_allocated_graph(::graph_serialize::Graph* graph);
  private:
  const ::graph_serialize::Graph& _internal_graph() const;
  ::graph_serialize::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::graph_serialize::Graph* graph);
  ::graph_serialize::Graph* unsafe_arena_release_graph();

  // @@protoc_insertion_point(class_scope:transport_set.Transport_set)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::Bus > buses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::Stop > stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::DistanceBetweenStops > distance_;
  ::transport_set::Render_settings* ren_;
  ::graph_serialize::Graph* graph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double lat = 1;
inline void Coordinates::clear_lat() {
  lat_ = 0;
}
inline double Coordinates::_internal_lat() const {
  return lat_;
}
inline double Coordinates::lat() const {
  // @@protoc_insertion_point(field_get:transport_set.Coordinates.lat)
  return _internal_lat();
}
inline void Coordinates::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Coordinates::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:transport_set.Coordinates.lat)
}

// double lng = 2;
inline void Coordinates::clear_lng() {
  lng_ = 0;
}
inline double Coordinates::_internal_lng() const {
  return lng_;
}
inline double Coordinates::lng() const {
  // @@protoc_insertion_point(field_get:transport_set.Coordinates.lng)
  return _internal_lng();
}
inline void Coordinates::_internal_set_lng(double value) {
  
  lng_ = value;
}
inline void Coordinates::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:transport_set.Coordinates.lng)
}

// -------------------------------------------------------------------

// DistanceBetweenStops

// int32 stop_from = 1;
inline void DistanceBetweenStops::clear_stop_from() {
  stop_from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DistanceBetweenStops::_internal_stop_from() const {
  return stop_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DistanceBetweenStops::stop_from() const {
  // @@protoc_insertion_point(field_get:transport_set.DistanceBetweenStops.stop_from)
  return _internal_stop_from();
}
inline void DistanceBetweenStops::_internal_set_stop_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stop_from_ = value;
}
inline void DistanceBetweenStops::set_stop_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stop_from(value);
  // @@protoc_insertion_point(field_set:transport_set.DistanceBetweenStops.stop_from)
}

// int32 stop_to = 2;
inline void DistanceBetweenStops::clear_stop_to() {
  stop_to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DistanceBetweenStops::_internal_stop_to() const {
  return stop_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DistanceBetweenStops::stop_to() const {
  // @@protoc_insertion_point(field_get:transport_set.DistanceBetweenStops.stop_to)
  return _internal_stop_to();
}
inline void DistanceBetweenStops::_internal_set_stop_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stop_to_ = value;
}
inline void DistanceBetweenStops::set_stop_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stop_to(value);
  // @@protoc_insertion_point(field_set:transport_set.DistanceBetweenStops.stop_to)
}

// double distance = 3;
inline void DistanceBetweenStops::clear_distance() {
  distance_ = 0;
}
inline double DistanceBetweenStops::_internal_distance() const {
  return distance_;
}
inline double DistanceBetweenStops::distance() const {
  // @@protoc_insertion_point(field_get:transport_set.DistanceBetweenStops.distance)
  return _internal_distance();
}
inline void DistanceBetweenStops::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void DistanceBetweenStops::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:transport_set.DistanceBetweenStops.distance)
}

// -------------------------------------------------------------------

// Bus

// string number_bus = 1;
inline void Bus::clear_number_bus() {
  number_bus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Bus::number_bus() const {
  // @@protoc_insertion_point(field_get:transport_set.Bus.number_bus)
  return _internal_number_bus();
}
inline void Bus::set_number_bus(const std::string& value) {
  _internal_set_number_bus(value);
  // @@protoc_insertion_point(field_set:transport_set.Bus.number_bus)
}
inline std::string* Bus::mutable_number_bus() {
  // @@protoc_insertion_point(field_mutable:transport_set.Bus.number_bus)
  return _internal_mutable_number_bus();
}
inline const std::string& Bus::_internal_number_bus() const {
  return number_bus_.Get();
}
inline void Bus::_internal_set_number_bus(const std::string& value) {
  
  number_bus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Bus::set_number_bus(std::string&& value) {
  
  number_bus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_set.Bus.number_bus)
}
inline void Bus::set_number_bus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_bus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:transport_set.Bus.number_bus)
}
inline void Bus::set_number_bus(const char* value,
    size_t size) {
  
  number_bus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_set.Bus.number_bus)
}
inline std::string* Bus::_internal_mutable_number_bus() {
  
  return number_bus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Bus::release_number_bus() {
  // @@protoc_insertion_point(field_release:transport_set.Bus.number_bus)
  return number_bus_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bus::set_allocated_number_bus(std::string* number_bus) {
  if (number_bus != nullptr) {
    
  } else {
    
  }
  number_bus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number_bus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_set.Bus.number_bus)
}

// bool circl = 2;
inline void Bus::clear_circl() {
  circl_ = false;
}
inline bool Bus::_internal_circl() const {
  return circl_;
}
inline bool Bus::circl() const {
  // @@protoc_insertion_point(field_get:transport_set.Bus.circl)
  return _internal_circl();
}
inline void Bus::_internal_set_circl(bool value) {
  
  circl_ = value;
}
inline void Bus::set_circl(bool value) {
  _internal_set_circl(value);
  // @@protoc_insertion_point(field_set:transport_set.Bus.circl)
}

// repeated uint32 index_stops = 3;
inline int Bus::_internal_index_stops_size() const {
  return index_stops_.size();
}
inline int Bus::index_stops_size() const {
  return _internal_index_stops_size();
}
inline void Bus::clear_index_stops() {
  index_stops_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Bus::_internal_index_stops(int index) const {
  return index_stops_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Bus::index_stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_set.Bus.index_stops)
  return _internal_index_stops(index);
}
inline void Bus::set_index_stops(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  index_stops_.Set(index, value);
  // @@protoc_insertion_point(field_set:transport_set.Bus.index_stops)
}
inline void Bus::_internal_add_index_stops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  index_stops_.Add(value);
}
inline void Bus::add_index_stops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_index_stops(value);
  // @@protoc_insertion_point(field_add:transport_set.Bus.index_stops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Bus::_internal_index_stops() const {
  return index_stops_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Bus::index_stops() const {
  // @@protoc_insertion_point(field_list:transport_set.Bus.index_stops)
  return _internal_index_stops();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Bus::_internal_mutable_index_stops() {
  return &index_stops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Bus::mutable_index_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_set.Bus.index_stops)
  return _internal_mutable_index_stops();
}

// -------------------------------------------------------------------

// Stop

// string name_bus_stop = 1;
inline void Stop::clear_name_bus_stop() {
  name_bus_stop_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Stop::name_bus_stop() const {
  // @@protoc_insertion_point(field_get:transport_set.Stop.name_bus_stop)
  return _internal_name_bus_stop();
}
inline void Stop::set_name_bus_stop(const std::string& value) {
  _internal_set_name_bus_stop(value);
  // @@protoc_insertion_point(field_set:transport_set.Stop.name_bus_stop)
}
inline std::string* Stop::mutable_name_bus_stop() {
  // @@protoc_insertion_point(field_mutable:transport_set.Stop.name_bus_stop)
  return _internal_mutable_name_bus_stop();
}
inline const std::string& Stop::_internal_name_bus_stop() const {
  return name_bus_stop_.Get();
}
inline void Stop::_internal_set_name_bus_stop(const std::string& value) {
  
  name_bus_stop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Stop::set_name_bus_stop(std::string&& value) {
  
  name_bus_stop_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_set.Stop.name_bus_stop)
}
inline void Stop::set_name_bus_stop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_bus_stop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:transport_set.Stop.name_bus_stop)
}
inline void Stop::set_name_bus_stop(const char* value,
    size_t size) {
  
  name_bus_stop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_set.Stop.name_bus_stop)
}
inline std::string* Stop::_internal_mutable_name_bus_stop() {
  
  return name_bus_stop_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Stop::release_name_bus_stop() {
  // @@protoc_insertion_point(field_release:transport_set.Stop.name_bus_stop)
  return name_bus_stop_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stop::set_allocated_name_bus_stop(std::string* name_bus_stop) {
  if (name_bus_stop != nullptr) {
    
  } else {
    
  }
  name_bus_stop_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_bus_stop,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_set.Stop.name_bus_stop)
}

// .transport_set.Coordinates cordinates = 2;
inline bool Stop::_internal_has_cordinates() const {
  return this != internal_default_instance() && cordinates_ != nullptr;
}
inline bool Stop::has_cordinates() const {
  return _internal_has_cordinates();
}
inline void Stop::clear_cordinates() {
  if (GetArena() == nullptr && cordinates_ != nullptr) {
    delete cordinates_;
  }
  cordinates_ = nullptr;
}
inline const ::transport_set::Coordinates& Stop::_internal_cordinates() const {
  const ::transport_set::Coordinates* p = cordinates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::transport_set::Coordinates*>(
      &::transport_set::_Coordinates_default_instance_);
}
inline const ::transport_set::Coordinates& Stop::cordinates() const {
  // @@protoc_insertion_point(field_get:transport_set.Stop.cordinates)
  return _internal_cordinates();
}
inline void Stop::unsafe_arena_set_allocated_cordinates(
    ::transport_set::Coordinates* cordinates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cordinates_);
  }
  cordinates_ = cordinates;
  if (cordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_set.Stop.cordinates)
}
inline ::transport_set::Coordinates* Stop::release_cordinates() {
  
  ::transport_set::Coordinates* temp = cordinates_;
  cordinates_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_set::Coordinates* Stop::unsafe_arena_release_cordinates() {
  // @@protoc_insertion_point(field_release:transport_set.Stop.cordinates)
  
  ::transport_set::Coordinates* temp = cordinates_;
  cordinates_ = nullptr;
  return temp;
}
inline ::transport_set::Coordinates* Stop::_internal_mutable_cordinates() {
  
  if (cordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_set::Coordinates>(GetArena());
    cordinates_ = p;
  }
  return cordinates_;
}
inline ::transport_set::Coordinates* Stop::mutable_cordinates() {
  // @@protoc_insertion_point(field_mutable:transport_set.Stop.cordinates)
  return _internal_mutable_cordinates();
}
inline void Stop::set_allocated_cordinates(::transport_set::Coordinates* cordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cordinates_;
  }
  if (cordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cordinates);
    if (message_arena != submessage_arena) {
      cordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cordinates, submessage_arena);
    }
    
  } else {
    
  }
  cordinates_ = cordinates;
  // @@protoc_insertion_point(field_set_allocated:transport_set.Stop.cordinates)
}

// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:transport_set.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:transport_set.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:transport_set.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:transport_set.Point.y)
}

// -------------------------------------------------------------------

// Render_settings

// double width = 1;
inline void Render_settings::clear_width() {
  width_ = 0;
}
inline double Render_settings::_internal_width() const {
  return width_;
}
inline double Render_settings::width() const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.width)
  return _internal_width();
}
inline void Render_settings::_internal_set_width(double value) {
  
  width_ = value;
}
inline void Render_settings::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:transport_set.Render_settings.width)
}

// double height = 2;
inline void Render_settings::clear_height() {
  height_ = 0;
}
inline double Render_settings::_internal_height() const {
  return height_;
}
inline double Render_settings::height() const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.height)
  return _internal_height();
}
inline void Render_settings::_internal_set_height(double value) {
  
  height_ = value;
}
inline void Render_settings::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:transport_set.Render_settings.height)
}

// double padding = 3;
inline void Render_settings::clear_padding() {
  padding_ = 0;
}
inline double Render_settings::_internal_padding() const {
  return padding_;
}
inline double Render_settings::padding() const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.padding)
  return _internal_padding();
}
inline void Render_settings::_internal_set_padding(double value) {
  
  padding_ = value;
}
inline void Render_settings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:transport_set.Render_settings.padding)
}

// double line_width = 4;
inline void Render_settings::clear_line_width() {
  line_width_ = 0;
}
inline double Render_settings::_internal_line_width() const {
  return line_width_;
}
inline double Render_settings::line_width() const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.line_width)
  return _internal_line_width();
}
inline void Render_settings::_internal_set_line_width(double value) {
  
  line_width_ = value;
}
inline void Render_settings::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:transport_set.Render_settings.line_width)
}

// double stop_radius = 5;
inline void Render_settings::clear_stop_radius() {
  stop_radius_ = 0;
}
inline double Render_settings::_internal_stop_radius() const {
  return stop_radius_;
}
inline double Render_settings::stop_radius() const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.stop_radius)
  return _internal_stop_radius();
}
inline void Render_settings::_internal_set_stop_radius(double value) {
  
  stop_radius_ = value;
}
inline void Render_settings::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:transport_set.Render_settings.stop_radius)
}

// int32 bus_lable_font_size = 6;
inline void Render_settings::clear_bus_lable_font_size() {
  bus_lable_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Render_settings::_internal_bus_lable_font_size() const {
  return bus_lable_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Render_settings::bus_lable_font_size() const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.bus_lable_font_size)
  return _internal_bus_lable_font_size();
}
inline void Render_settings::_internal_set_bus_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bus_lable_font_size_ = value;
}
inline void Render_settings::set_bus_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bus_lable_font_size(value);
  // @@protoc_insertion_point(field_set:transport_set.Render_settings.bus_lable_font_size)
}

// .transport_set.Point bus_lable_offset = 7;
inline bool Render_settings::_internal_has_bus_lable_offset() const {
  return this != internal_default_instance() && bus_lable_offset_ != nullptr;
}
inline bool Render_settings::has_bus_lable_offset() const {
  return _internal_has_bus_lable_offset();
}
inline void Render_settings::clear_bus_lable_offset() {
  if (GetArena() == nullptr && bus_lable_offset_ != nullptr) {
    delete bus_lable_offset_;
  }
  bus_lable_offset_ = nullptr;
}
inline const ::transport_set::Point& Render_settings::_internal_bus_lable_offset() const {
  const ::transport_set::Point* p = bus_lable_offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::transport_set::Point*>(
      &::transport_set::_Point_default_instance_);
}
inline const ::transport_set::Point& Render_settings::bus_lable_offset() const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.bus_lable_offset)
  return _internal_bus_lable_offset();
}
inline void Render_settings::unsafe_arena_set_allocated_bus_lable_offset(
    ::transport_set::Point* bus_lable_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_lable_offset_);
  }
  bus_lable_offset_ = bus_lable_offset;
  if (bus_lable_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_set.Render_settings.bus_lable_offset)
}
inline ::transport_set::Point* Render_settings::release_bus_lable_offset() {
  
  ::transport_set::Point* temp = bus_lable_offset_;
  bus_lable_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_set::Point* Render_settings::unsafe_arena_release_bus_lable_offset() {
  // @@protoc_insertion_point(field_release:transport_set.Render_settings.bus_lable_offset)
  
  ::transport_set::Point* temp = bus_lable_offset_;
  bus_lable_offset_ = nullptr;
  return temp;
}
inline ::transport_set::Point* Render_settings::_internal_mutable_bus_lable_offset() {
  
  if (bus_lable_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_set::Point>(GetArena());
    bus_lable_offset_ = p;
  }
  return bus_lable_offset_;
}
inline ::transport_set::Point* Render_settings::mutable_bus_lable_offset() {
  // @@protoc_insertion_point(field_mutable:transport_set.Render_settings.bus_lable_offset)
  return _internal_mutable_bus_lable_offset();
}
inline void Render_settings::set_allocated_bus_lable_offset(::transport_set::Point* bus_lable_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bus_lable_offset_;
  }
  if (bus_lable_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bus_lable_offset);
    if (message_arena != submessage_arena) {
      bus_lable_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_lable_offset, submessage_arena);
    }
    
  } else {
    
  }
  bus_lable_offset_ = bus_lable_offset;
  // @@protoc_insertion_point(field_set_allocated:transport_set.Render_settings.bus_lable_offset)
}

// int32 stop_lable_font_size = 8;
inline void Render_settings::clear_stop_lable_font_size() {
  stop_lable_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Render_settings::_internal_stop_lable_font_size() const {
  return stop_lable_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Render_settings::stop_lable_font_size() const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.stop_lable_font_size)
  return _internal_stop_lable_font_size();
}
inline void Render_settings::_internal_set_stop_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stop_lable_font_size_ = value;
}
inline void Render_settings::set_stop_lable_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stop_lable_font_size(value);
  // @@protoc_insertion_point(field_set:transport_set.Render_settings.stop_lable_font_size)
}

// .transport_set.Point stop_label_offset = 9;
inline bool Render_settings::_internal_has_stop_label_offset() const {
  return this != internal_default_instance() && stop_label_offset_ != nullptr;
}
inline bool Render_settings::has_stop_label_offset() const {
  return _internal_has_stop_label_offset();
}
inline void Render_settings::clear_stop_label_offset() {
  if (GetArena() == nullptr && stop_label_offset_ != nullptr) {
    delete stop_label_offset_;
  }
  stop_label_offset_ = nullptr;
}
inline const ::transport_set::Point& Render_settings::_internal_stop_label_offset() const {
  const ::transport_set::Point* p = stop_label_offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::transport_set::Point*>(
      &::transport_set::_Point_default_instance_);
}
inline const ::transport_set::Point& Render_settings::stop_label_offset() const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.stop_label_offset)
  return _internal_stop_label_offset();
}
inline void Render_settings::unsafe_arena_set_allocated_stop_label_offset(
    ::transport_set::Point* stop_label_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_label_offset_);
  }
  stop_label_offset_ = stop_label_offset;
  if (stop_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_set.Render_settings.stop_label_offset)
}
inline ::transport_set::Point* Render_settings::release_stop_label_offset() {
  
  ::transport_set::Point* temp = stop_label_offset_;
  stop_label_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_set::Point* Render_settings::unsafe_arena_release_stop_label_offset() {
  // @@protoc_insertion_point(field_release:transport_set.Render_settings.stop_label_offset)
  
  ::transport_set::Point* temp = stop_label_offset_;
  stop_label_offset_ = nullptr;
  return temp;
}
inline ::transport_set::Point* Render_settings::_internal_mutable_stop_label_offset() {
  
  if (stop_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_set::Point>(GetArena());
    stop_label_offset_ = p;
  }
  return stop_label_offset_;
}
inline ::transport_set::Point* Render_settings::mutable_stop_label_offset() {
  // @@protoc_insertion_point(field_mutable:transport_set.Render_settings.stop_label_offset)
  return _internal_mutable_stop_label_offset();
}
inline void Render_settings::set_allocated_stop_label_offset(::transport_set::Point* stop_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_label_offset_;
  }
  if (stop_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_label_offset);
    if (message_arena != submessage_arena) {
      stop_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  stop_label_offset_ = stop_label_offset;
  // @@protoc_insertion_point(field_set_allocated:transport_set.Render_settings.stop_label_offset)
}

// string underlayer_color_string = 10;
inline void Render_settings::clear_underlayer_color_string() {
  underlayer_color_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Render_settings::underlayer_color_string() const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.underlayer_color_string)
  return _internal_underlayer_color_string();
}
inline void Render_settings::set_underlayer_color_string(const std::string& value) {
  _internal_set_underlayer_color_string(value);
  // @@protoc_insertion_point(field_set:transport_set.Render_settings.underlayer_color_string)
}
inline std::string* Render_settings::mutable_underlayer_color_string() {
  // @@protoc_insertion_point(field_mutable:transport_set.Render_settings.underlayer_color_string)
  return _internal_mutable_underlayer_color_string();
}
inline const std::string& Render_settings::_internal_underlayer_color_string() const {
  return underlayer_color_string_.Get();
}
inline void Render_settings::_internal_set_underlayer_color_string(const std::string& value) {
  
  underlayer_color_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Render_settings::set_underlayer_color_string(std::string&& value) {
  
  underlayer_color_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_set.Render_settings.underlayer_color_string)
}
inline void Render_settings::set_underlayer_color_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  underlayer_color_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:transport_set.Render_settings.underlayer_color_string)
}
inline void Render_settings::set_underlayer_color_string(const char* value,
    size_t size) {
  
  underlayer_color_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_set.Render_settings.underlayer_color_string)
}
inline std::string* Render_settings::_internal_mutable_underlayer_color_string() {
  
  return underlayer_color_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Render_settings::release_underlayer_color_string() {
  // @@protoc_insertion_point(field_release:transport_set.Render_settings.underlayer_color_string)
  return underlayer_color_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Render_settings::set_allocated_underlayer_color_string(std::string* underlayer_color_string) {
  if (underlayer_color_string != nullptr) {
    
  } else {
    
  }
  underlayer_color_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), underlayer_color_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_set.Render_settings.underlayer_color_string)
}

// double underlayer_width = 11;
inline void Render_settings::clear_underlayer_width() {
  underlayer_width_ = 0;
}
inline double Render_settings::_internal_underlayer_width() const {
  return underlayer_width_;
}
inline double Render_settings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.underlayer_width)
  return _internal_underlayer_width();
}
inline void Render_settings::_internal_set_underlayer_width(double value) {
  
  underlayer_width_ = value;
}
inline void Render_settings::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:transport_set.Render_settings.underlayer_width)
}

// repeated string palette_string = 12;
inline int Render_settings::_internal_palette_string_size() const {
  return palette_string_.size();
}
inline int Render_settings::palette_string_size() const {
  return _internal_palette_string_size();
}
inline void Render_settings::clear_palette_string() {
  palette_string_.Clear();
}
inline std::string* Render_settings::add_palette_string() {
  // @@protoc_insertion_point(field_add_mutable:transport_set.Render_settings.palette_string)
  return _internal_add_palette_string();
}
inline const std::string& Render_settings::_internal_palette_string(int index) const {
  return palette_string_.Get(index);
}
inline const std::string& Render_settings::palette_string(int index) const {
  // @@protoc_insertion_point(field_get:transport_set.Render_settings.palette_string)
  return _internal_palette_string(index);
}
inline std::string* Render_settings::mutable_palette_string(int index) {
  // @@protoc_insertion_point(field_mutable:transport_set.Render_settings.palette_string)
  return palette_string_.Mutable(index);
}
inline void Render_settings::set_palette_string(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:transport_set.Render_settings.palette_string)
  palette_string_.Mutable(index)->assign(value);
}
inline void Render_settings::set_palette_string(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:transport_set.Render_settings.palette_string)
  palette_string_.Mutable(index)->assign(std::move(value));
}
inline void Render_settings::set_palette_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  palette_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transport_set.Render_settings.palette_string)
}
inline void Render_settings::set_palette_string(int index, const char* value, size_t size) {
  palette_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transport_set.Render_settings.palette_string)
}
inline std::string* Render_settings::_internal_add_palette_string() {
  return palette_string_.Add();
}
inline void Render_settings::add_palette_string(const std::string& value) {
  palette_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transport_set.Render_settings.palette_string)
}
inline void Render_settings::add_palette_string(std::string&& value) {
  palette_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transport_set.Render_settings.palette_string)
}
inline void Render_settings::add_palette_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  palette_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transport_set.Render_settings.palette_string)
}
inline void Render_settings::add_palette_string(const char* value, size_t size) {
  palette_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transport_set.Render_settings.palette_string)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Render_settings::palette_string() const {
  // @@protoc_insertion_point(field_list:transport_set.Render_settings.palette_string)
  return palette_string_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Render_settings::mutable_palette_string() {
  // @@protoc_insertion_point(field_mutable_list:transport_set.Render_settings.palette_string)
  return &palette_string_;
}

// -------------------------------------------------------------------

// Transport_set

// repeated .transport_set.Bus buses = 1;
inline int Transport_set::_internal_buses_size() const {
  return buses_.size();
}
inline int Transport_set::buses_size() const {
  return _internal_buses_size();
}
inline void Transport_set::clear_buses() {
  buses_.Clear();
}
inline ::transport_set::Bus* Transport_set::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:transport_set.Transport_set.buses)
  return buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::Bus >*
Transport_set::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:transport_set.Transport_set.buses)
  return &buses_;
}
inline const ::transport_set::Bus& Transport_set::_internal_buses(int index) const {
  return buses_.Get(index);
}
inline const ::transport_set::Bus& Transport_set::buses(int index) const {
  // @@protoc_insertion_point(field_get:transport_set.Transport_set.buses)
  return _internal_buses(index);
}
inline ::transport_set::Bus* Transport_set::_internal_add_buses() {
  return buses_.Add();
}
inline ::transport_set::Bus* Transport_set::add_buses() {
  // @@protoc_insertion_point(field_add:transport_set.Transport_set.buses)
  return _internal_add_buses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::Bus >&
Transport_set::buses() const {
  // @@protoc_insertion_point(field_list:transport_set.Transport_set.buses)
  return buses_;
}

// repeated .transport_set.Stop stops = 2;
inline int Transport_set::_internal_stops_size() const {
  return stops_.size();
}
inline int Transport_set::stops_size() const {
  return _internal_stops_size();
}
inline void Transport_set::clear_stops() {
  stops_.Clear();
}
inline ::transport_set::Stop* Transport_set::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_set.Transport_set.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::Stop >*
Transport_set::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_set.Transport_set.stops)
  return &stops_;
}
inline const ::transport_set::Stop& Transport_set::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::transport_set::Stop& Transport_set::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_set.Transport_set.stops)
  return _internal_stops(index);
}
inline ::transport_set::Stop* Transport_set::_internal_add_stops() {
  return stops_.Add();
}
inline ::transport_set::Stop* Transport_set::add_stops() {
  // @@protoc_insertion_point(field_add:transport_set.Transport_set.stops)
  return _internal_add_stops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::Stop >&
Transport_set::stops() const {
  // @@protoc_insertion_point(field_list:transport_set.Transport_set.stops)
  return stops_;
}

// repeated .transport_set.DistanceBetweenStops distance = 3;
inline int Transport_set::_internal_distance_size() const {
  return distance_.size();
}
inline int Transport_set::distance_size() const {
  return _internal_distance_size();
}
inline void Transport_set::clear_distance() {
  distance_.Clear();
}
inline ::transport_set::DistanceBetweenStops* Transport_set::mutable_distance(int index) {
  // @@protoc_insertion_point(field_mutable:transport_set.Transport_set.distance)
  return distance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::DistanceBetweenStops >*
Transport_set::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:transport_set.Transport_set.distance)
  return &distance_;
}
inline const ::transport_set::DistanceBetweenStops& Transport_set::_internal_distance(int index) const {
  return distance_.Get(index);
}
inline const ::transport_set::DistanceBetweenStops& Transport_set::distance(int index) const {
  // @@protoc_insertion_point(field_get:transport_set.Transport_set.distance)
  return _internal_distance(index);
}
inline ::transport_set::DistanceBetweenStops* Transport_set::_internal_add_distance() {
  return distance_.Add();
}
inline ::transport_set::DistanceBetweenStops* Transport_set::add_distance() {
  // @@protoc_insertion_point(field_add:transport_set.Transport_set.distance)
  return _internal_add_distance();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_set::DistanceBetweenStops >&
Transport_set::distance() const {
  // @@protoc_insertion_point(field_list:transport_set.Transport_set.distance)
  return distance_;
}

// .transport_set.Render_settings ren = 4;
inline bool Transport_set::_internal_has_ren() const {
  return this != internal_default_instance() && ren_ != nullptr;
}
inline bool Transport_set::has_ren() const {
  return _internal_has_ren();
}
inline void Transport_set::clear_ren() {
  if (GetArena() == nullptr && ren_ != nullptr) {
    delete ren_;
  }
  ren_ = nullptr;
}
inline const ::transport_set::Render_settings& Transport_set::_internal_ren() const {
  const ::transport_set::Render_settings* p = ren_;
  return p != nullptr ? *p : *reinterpret_cast<const ::transport_set::Render_settings*>(
      &::transport_set::_Render_settings_default_instance_);
}
inline const ::transport_set::Render_settings& Transport_set::ren() const {
  // @@protoc_insertion_point(field_get:transport_set.Transport_set.ren)
  return _internal_ren();
}
inline void Transport_set::unsafe_arena_set_allocated_ren(
    ::transport_set::Render_settings* ren) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ren_);
  }
  ren_ = ren;
  if (ren) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_set.Transport_set.ren)
}
inline ::transport_set::Render_settings* Transport_set::release_ren() {
  
  ::transport_set::Render_settings* temp = ren_;
  ren_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_set::Render_settings* Transport_set::unsafe_arena_release_ren() {
  // @@protoc_insertion_point(field_release:transport_set.Transport_set.ren)
  
  ::transport_set::Render_settings* temp = ren_;
  ren_ = nullptr;
  return temp;
}
inline ::transport_set::Render_settings* Transport_set::_internal_mutable_ren() {
  
  if (ren_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_set::Render_settings>(GetArena());
    ren_ = p;
  }
  return ren_;
}
inline ::transport_set::Render_settings* Transport_set::mutable_ren() {
  // @@protoc_insertion_point(field_mutable:transport_set.Transport_set.ren)
  return _internal_mutable_ren();
}
inline void Transport_set::set_allocated_ren(::transport_set::Render_settings* ren) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ren_;
  }
  if (ren) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ren);
    if (message_arena != submessage_arena) {
      ren = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ren, submessage_arena);
    }
    
  } else {
    
  }
  ren_ = ren;
  // @@protoc_insertion_point(field_set_allocated:transport_set.Transport_set.ren)
}

// .graph_serialize.Graph graph = 5;
inline bool Transport_set::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool Transport_set::has_graph() const {
  return _internal_has_graph();
}
inline const ::graph_serialize::Graph& Transport_set::_internal_graph() const {
  const ::graph_serialize::Graph* p = graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::graph_serialize::Graph*>(
      &::graph_serialize::_Graph_default_instance_);
}
inline const ::graph_serialize::Graph& Transport_set::graph() const {
  // @@protoc_insertion_point(field_get:transport_set.Transport_set.graph)
  return _internal_graph();
}
inline void Transport_set::unsafe_arena_set_allocated_graph(
    ::graph_serialize::Graph* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_set.Transport_set.graph)
}
inline ::graph_serialize::Graph* Transport_set::release_graph() {
  
  ::graph_serialize::Graph* temp = graph_;
  graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::graph_serialize::Graph* Transport_set::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:transport_set.Transport_set.graph)
  
  ::graph_serialize::Graph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::graph_serialize::Graph* Transport_set::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::graph_serialize::Graph>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::graph_serialize::Graph* Transport_set::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:transport_set.Transport_set.graph)
  return _internal_mutable_graph();
}
inline void Transport_set::set_allocated_graph(::graph_serialize::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph)->GetArena();
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:transport_set.Transport_set.graph)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_set

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
